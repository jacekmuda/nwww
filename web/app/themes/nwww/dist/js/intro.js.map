{"version":3,"sources":["webpack:///intro.js","webpack:///webpack/bootstrap 3c71f7de570ffbdd0cc9?8023","webpack:///./assets/js/intro.js","webpack:///./~/snapsvg/dist/snap.svg.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","shuffle","a","i","length","j","Math","floor","random","_ref","intro_start","sh","arr","groups","forEach","elem","matrix","Snap","Matrix","hh","margin","ih","ww","iw","scale","h","translate","attr","transform","s","viewBox","w","join","selectAll","curindex","$","on","e","target","is","animate","scrollTop","window","height","photos","intro_content","lead","photo","text","img","Image","src","onload","width","document","ready","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","obj","constructor","prototype","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","b","events","n","firstDefined","ii","this","lastDefined","objtos","Object","toString","Str","String","isArray","Array","ar","eve","_x","_x2","_eve","apply","arguments","name","scope","l","oldstop","args","slice","listeners","z","indexed","queue","out","ce","push","zIndex","sort","_events","item","items","k","jj","nes","names","split","es","concat","f","sep","replace","RegExp","exist","hasOwnProperty","event","attrs","nt","subname","cur","test","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","undefined","factory","mina","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","idgen","idprefix","ID","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","update","pause","pdif","get","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","root","nodeType","wrap","Element","doc","querySelector","Paper","el","createTextNode","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","type","toLowerCase","isFinite","objectToString","clone","repush","array","cacher","postprocessor","newf","arg","cache","count","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","all","params","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","bb","tlen","command","absolute","inver","invert","rotate","add","getSomeDefs","node","ownerSVGElement","parentNode","select","pdefs","defs","make","getSomeSVG","unit2px","value","getW","E","mgr","getBBox","getH","nam","svg","class","fill","appendChild","removeChild","add2group","list","children","childNodes","snap","hub","paper","tagName","nodeName","anims","_","g","mask","pattern","symbol","method","Fragment","frag","parent","desc","proto","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","toFloat","parseFloat","toInt","parseInt","mmax","max","mmin","min","round","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","paramCounts","u","data","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getOffset","box","getBoundingClientRect","docElem","clientTop","clientLeft","top","pageYOffset","left","pageXOffset","scrollLeft","getElementByPoint","canvas","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","fixids","urltest","it","uses","linktest","els","ids","oldid","old","fs","chld","elproto","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","map","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","setter","eq","fkeys","tkeys","keys","equal","d","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","URL","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","deurl","clipIt","gradrg","seed","step","stops","tokens","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","internal","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","cssText","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","stopOffset","GgetBBox","GsetStops","addStop","gradientLinear","gradientRadial","gradientUnits","setStops","fx","fy","clear","next","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","ax","ay","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","mui","flat","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors"],"mappings":"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","file":"intro.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Snap = __webpack_require__(2);\n\t\n\tvar margin = 54,\n\t    arr = [0, 1, 2, 3],\n\t    w = $(window).width(),\n\t    h = $(window).height(),\n\t    iw = w / 4,\n\t    ih = h / 4;\n\t\n\tfunction shuffle(a) {\n\t    for (var i = a.length; i; i--) {\n\t        var j = Math.floor(Math.random() * i);\n\t        var _ref = [a[j], a[i - 1]];\n\t        a[i - 1] = _ref[0];\n\t        a[j] = _ref[1];\n\t    }\n\t}\n\t\n\tfunction intro_start() {\n\t\n\t    var s = Snap('#intrologo');\n\t\n\t    s.attr({ viewBox: [0, 0, w, h].join(',') }).attr('height', h).attr('width', w);\n\t\n\t    var groups = s.selectAll('.gr');\n\t\n\t    function sh() {\n\t        shuffle(arr);\n\t\n\t        groups.forEach(function (elem, i) {\n\t            var a = arr[i],\n\t                matrix = new Snap.Matrix(),\n\t                hh = margin + ih * a,\n\t                ww = margin + iw * i + a * 30;\n\t            matrix.scale(.8);\n\t\n\t            if (hh > h * 0.9 && i == 0) {\n\t                hh = hh - 300;\n\t            }\n\t\n\t            matrix.translate(ww, hh);\n\t\n\t            elem.attr({ transform: matrix });\n\t        });\n\t    }\n\t\n\t    sh();\n\t\n\t    s.attr('class', 'show');\n\t    var curindex = 0;\n\t    $('.intro__section').on('click', function (e) {\n\t\n\t        if ($(e.target).is('.pointer *')) {\n\t            $('html, body').animate({ scrollTop: $(window).height() });\n\t            return;\n\t        }\n\t\n\t        curindex = curindex + 1;\n\t\n\t        var photos = intro_content.photos,\n\t            lead = intro_content.lead,\n\t            photo = $('.intro__img'),\n\t            text = $('.intro__section h1 span');\n\t\n\t        if (typeof photos[curindex] === 'undefined') {\n\t            curindex = 0;\n\t        }\n\t\n\t        var img = new Image();\n\t        img.src = photos[curindex]['full'];\n\t\n\t        img.onload = function () {\n\t            photo.attr('src', img.src);\n\t        };\n\t\n\t        text.text(lead[curindex]['content']);\n\t\n\t        sh();\n\t    });\n\t}\n\t$(document).ready(function () {\n\t    intro_start();\n\t});\n\n/***/ }),\n/* 1 */,\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\tvar fix = module.exports=0;\n\t\n\t\"use strict\";\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t// Snap.svg 0.5.0\n\t//\n\t// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t//\n\t// build: 2017-02-06\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function fun() {},\n\t        numsort = function numsort(a, b) {\n\t        return a - b;\n\t    },\n\t        current_event,\n\t        stop,\n\t        events = { n: {} },\n\t        firstDefined = function firstDefined() {\n\t        for (var i = 0, ii = this.length; i < ii; i++) {\n\t            if (typeof this[i] != \"undefined\") {\n\t                return this[i];\n\t            }\n\t        }\n\t    },\n\t        lastDefined = function lastDefined() {\n\t        var i = this.length;\n\t        while (--i) {\n\t            if (typeof this[i] != \"undefined\") {\n\t                return this[i];\n\t            }\n\t        }\n\t    },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t        return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t    };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t      * Fires event with given `name`, given scope and other parameters.\n\t      > Arguments\n\t      - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t      = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t    eve = function (_eve) {\n\t        function eve(_x, _x2) {\n\t            return _eve.apply(this, arguments);\n\t        }\n\t\n\t        eve.toString = function () {\n\t            return _eve.toString();\n\t        };\n\t\n\t        return eve;\n\t    }(function (name, scope) {\n\t        var e = events,\n\t            oldstop = stop,\n\t            args = Array.prototype.slice.call(arguments, 2),\n\t            listeners = eve.listeners(name),\n\t            z = 0,\n\t            f = false,\n\t            l,\n\t            indexed = [],\n\t            queue = {},\n\t            out = [],\n\t            ce = current_event,\n\t            errors = [];\n\t        out.firstDefined = firstDefined;\n\t        out.lastDefined = lastDefined;\n\t        current_event = name;\n\t        stop = 0;\n\t        for (var i = 0, ii = listeners.length; i < ii; i++) {\n\t            if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t        }indexed.sort(numsort);\n\t        while (indexed[z] < 0) {\n\t            l = queue[indexed[z++]];\n\t            out.push(l.apply(scope, args));\n\t            if (stop) {\n\t                stop = oldstop;\n\t                return out;\n\t            }\n\t        }\n\t        for (i = 0; i < ii; i++) {\n\t            l = listeners[i];\n\t            if (\"zIndex\" in l) {\n\t                if (l.zIndex == indexed[z]) {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                    do {\n\t                        z++;\n\t                        l = queue[indexed[z]];\n\t                        l && out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                    } while (l);\n\t                } else {\n\t                    queue[l.zIndex] = l;\n\t                }\n\t            } else {\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        stop = oldstop;\n\t        current_event = ce;\n\t        return out;\n\t    });\n\t    // Undocumented. Debug only.\n\t    eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t      * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t      > Arguments\n\t      - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t      = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\t      * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\t      - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = { n: {} });\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) {\n\t                    if (e.f[i] == f) {\n\t                        exist = true;\n\t                        break;\n\t                    }\n\t                }!exist && e.f.push(f);\n\t            })(names[i]);\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = { n: {} };\n\t            return;\n\t        }\n\t        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            cur = [events],\n\t            inodes = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                        inodes.unshift({\n\t                            n: e,\n\t                            name: names[i]\n\t                        });\n\t                    }\n\t                } else {\n\t                    for (key in e) {\n\t                        if (e[has](key)) {\n\t                            splice.push(e[key]);\n\t                            inodes.unshift({\n\t                                n: e,\n\t                                name: key\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) {\n\t                            if (e.f[j] == f) {\n\t                                e.f.splice(j, 1);\n\t                                break;\n\t                            }\n\t                        }!e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) {\n\t                        if (e.n[has](key) && e.n[key].f) {\n\t                            var funcs = e.n[key].f;\n\t                            for (j = 0, jj = funcs.length; j < jj; j++) {\n\t                                if (funcs[j] == f) {\n\t                                    funcs.splice(j, 1);\n\t                                    break;\n\t                                }\n\t                            }!funcs.length && delete e.n[key].f;\n\t                        }\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) {\n\t                        if (e.n[has](key) && e.n[key].f) {\n\t                            delete e.n[key].f;\n\t                        }\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t        // prune inner nodes in path\n\t        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n\t            e = inodes[i];\n\t            for (key in e.n[e.name].f) {\n\t                // not empty (has listeners)\n\t                continue prune;\n\t            }\n\t            for (key in e.n[e.name].n) {\n\t                // not empty (has children)\n\t                continue prune;\n\t            }\n\t            // is empty\n\t            delete e.n[e.name];\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function f2() {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    typeof module != \"undefined\" && module.exports ? module.exports = eve :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function () {\n\t        return eve;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__))) : glob.eve = eve;\n\t})(undefined);\n\t\n\t(function (glob, factory) {\n\t    // AMD support\n\t    if (true) {\n\t        // Define as an anonymous module\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n\t            return factory(glob, eve);\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports != \"undefined\") {\n\t        // Next for Node.js or CommonJS\n\t        var eve = require(\"eve\");\n\t        module.exports = factory(glob, eve);\n\t    } else {\n\t        // Browser globals (glob is window)\n\t        // Snap adds itself to window\n\t        factory(glob, glob.eve);\n\t    }\n\t})(window || undefined, function (window, eve) {\n\t\n\t    // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    var mina = function (eve) {\n\t        var animations = {},\n\t            requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n\t            setTimeout(callback, 16, new Date().getTime());\n\t            return true;\n\t        },\n\t            requestID,\n\t            isArray = Array.isArray || function (a) {\n\t            return a instanceof Array || Object.prototype.toString.call(a) == \"[object Array]\";\n\t        },\n\t            idgen = 0,\n\t            idprefix = \"M\" + (+new Date()).toString(36),\n\t            ID = function ID() {\n\t            return idprefix + (idgen++).toString(36);\n\t        },\n\t            diff = function diff(a, b, A, B) {\n\t            if (isArray(a)) {\n\t                res = [];\n\t                for (var i = 0, ii = a.length; i < ii; i++) {\n\t                    res[i] = diff(a[i], b, A[i], B);\n\t                }\n\t                return res;\n\t            }\n\t            var dif = (A - a) / (B - b);\n\t            return function (bb) {\n\t                return a + dif * (bb - b);\n\t            };\n\t        },\n\t            timer = Date.now || function () {\n\t            return +new Date();\n\t        },\n\t            sta = function sta(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.s;\n\t            }\n\t            var ds = a.s - val;\n\t            a.b += a.dur * ds;\n\t            a.B += a.dur * ds;\n\t            a.s = val;\n\t        },\n\t            speed = function speed(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.spd;\n\t            }\n\t            a.spd = val;\n\t        },\n\t            duration = function duration(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.dur;\n\t            }\n\t            a.s = a.s * val / a.dur;\n\t            a.dur = val;\n\t        },\n\t            stopit = function stopit() {\n\t            var a = this;\n\t            delete animations[a.id];\n\t            a.update();\n\t            eve(\"mina.stop.\" + a.id, a);\n\t        },\n\t            pause = function pause() {\n\t            var a = this;\n\t            if (a.pdif) {\n\t                return;\n\t            }\n\t            delete animations[a.id];\n\t            a.update();\n\t            a.pdif = a.get() - a.b;\n\t        },\n\t            resume = function resume() {\n\t            var a = this;\n\t            if (!a.pdif) {\n\t                return;\n\t            }\n\t            a.b = a.get() - a.pdif;\n\t            delete a.pdif;\n\t            animations[a.id] = a;\n\t            frame();\n\t        },\n\t            update = function update() {\n\t            var a = this,\n\t                res;\n\t            if (isArray(a.start)) {\n\t                res = [];\n\t                for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                    res[j] = +a.start[j] + (a.end[j] - a.start[j]) * a.easing(a.s);\n\t                }\n\t            } else {\n\t                res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t            }\n\t            a.set(res);\n\t        },\n\t            frame = function frame(timeStamp) {\n\t            // Manual invokation?\n\t            if (!timeStamp) {\n\t                // Frame loop stopped?\n\t                if (!requestID) {\n\t                    // Start frame loop...\n\t                    requestID = requestAnimFrame(frame);\n\t                }\n\t                return;\n\t            }\n\t            var len = 0;\n\t            for (var i in animations) {\n\t                if (animations.hasOwnProperty(i)) {\n\t                    var a = animations[i],\n\t                        b = a.get(),\n\t                        res;\n\t                    len++;\n\t                    a.s = (b - a.b) / (a.dur / a.spd);\n\t                    if (a.s >= 1) {\n\t                        delete animations[i];\n\t                        a.s = 1;\n\t                        len--;\n\t                        (function (a) {\n\t                            setTimeout(function () {\n\t                                eve(\"mina.finish.\" + a.id, a);\n\t                            });\n\t                        })(a);\n\t                    }\n\t                    a.update();\n\t                }\n\t            }requestID = len ? requestAnimFrame(frame) : false;\n\t        },\n\t\n\t        /*\\\n\t         * mina\n\t         [ method ]\n\t         **\n\t         * Generic animation of numbers\n\t         **\n\t         - a (number) start _slave_ number\n\t         - A (number) end _slave_ number\n\t         - b (number) start _master_ number (start time in general case)\n\t         - B (number) end _master_ number (end time in general case)\n\t         - get (function) getter of _master_ number (see @mina.time)\n\t         - set (function) setter of _slave_ number\n\t         - easing (function) #optional easing function, default is @mina.linear\n\t         = (object) animation descriptor\n\t         o {\n\t         o         id (string) animation id,\n\t         o         start (number) start _slave_ number,\n\t         o         end (number) end _slave_ number,\n\t         o         b (number) start _master_ number,\n\t         o         s (number) animation status (0..1),\n\t         o         dur (number) animation duration,\n\t         o         spd (number) animation speed,\n\t         o         get (function) getter of _master_ number (see @mina.time),\n\t         o         set (function) setter of _slave_ number,\n\t         o         easing (function) easing function, default is @mina.linear,\n\t         o         status (function) status getter/setter,\n\t         o         speed (function) speed getter/setter,\n\t         o         duration (function) duration getter/setter,\n\t         o         stop (function) animation stopper\n\t         o         pause (function) pauses the animation\n\t         o         resume (function) resumes the animation\n\t         o         update (function) calles setter with the right value of the animation\n\t         o }\n\t        \\*/\n\t        mina = function mina(a, A, b, B, get, set, easing) {\n\t            var anim = {\n\t                id: ID(),\n\t                start: a,\n\t                end: A,\n\t                b: b,\n\t                s: 0,\n\t                dur: B - b,\n\t                spd: 1,\n\t                get: get,\n\t                set: set,\n\t                easing: easing || mina.linear,\n\t                status: sta,\n\t                speed: speed,\n\t                duration: duration,\n\t                stop: stopit,\n\t                pause: pause,\n\t                resume: resume,\n\t                update: update\n\t            };\n\t            animations[anim.id] = anim;\n\t            var len = 0,\n\t                i;\n\t            for (i in animations) {\n\t                if (animations.hasOwnProperty(i)) {\n\t                    len++;\n\t                    if (len == 2) {\n\t                        break;\n\t                    }\n\t                }\n\t            }len == 1 && frame();\n\t            return anim;\n\t        };\n\t        /*\\\n\t         * mina.time\n\t         [ method ]\n\t         **\n\t         * Returns the current time. Equivalent to:\n\t         | function () {\n\t         |     return (new Date).getTime();\n\t         | }\n\t        \\*/\n\t        mina.time = timer;\n\t        /*\\\n\t         * mina.getById\n\t         [ method ]\n\t         **\n\t         * Returns an animation by its id\n\t         - id (string) animation's id\n\t         = (object) See @mina\n\t        \\*/\n\t        mina.getById = function (id) {\n\t            return animations[id] || null;\n\t        };\n\t\n\t        /*\\\n\t         * mina.linear\n\t         [ method ]\n\t         **\n\t         * Default linear easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.linear = function (n) {\n\t            return n;\n\t        };\n\t        /*\\\n\t         * mina.easeout\n\t         [ method ]\n\t         **\n\t         * Easeout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easeout = function (n) {\n\t            return Math.pow(n, 1.7);\n\t        };\n\t        /*\\\n\t         * mina.easein\n\t         [ method ]\n\t         **\n\t         * Easein easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easein = function (n) {\n\t            return Math.pow(n, .48);\n\t        };\n\t        /*\\\n\t         * mina.easeinout\n\t         [ method ]\n\t         **\n\t         * Easeinout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easeinout = function (n) {\n\t            if (n == 1) {\n\t                return 1;\n\t            }\n\t            if (n == 0) {\n\t                return 0;\n\t            }\n\t            var q = .48 - n / 1.04,\n\t                Q = Math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        };\n\t        /*\\\n\t         * mina.backin\n\t         [ method ]\n\t         **\n\t         * Backin easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.backin = function (n) {\n\t            if (n == 1) {\n\t                return 1;\n\t            }\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        };\n\t        /*\\\n\t         * mina.backout\n\t         [ method ]\n\t         **\n\t         * Backout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.backout = function (n) {\n\t            if (n == 0) {\n\t                return 0;\n\t            }\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        };\n\t        /*\\\n\t         * mina.elastic\n\t         [ method ]\n\t         **\n\t         * Elastic easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.elastic = function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return Math.pow(2, -10 * n) * Math.sin((n - .075) * (2 * Math.PI) / .3) + 1;\n\t        };\n\t        /*\\\n\t         * mina.bounce\n\t         [ method ]\n\t         **\n\t         * Bounce easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.bounce = function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < 1 / p) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < 2 / p) {\n\t                    n -= 1.5 / p;\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < 2.5 / p) {\n\t                        n -= 2.25 / p;\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= 2.625 / p;\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        };\n\t        window.mina = mina;\n\t        return mina;\n\t    }(typeof eve == \"undefined\" ? function () {} : eve);\n\t\n\t    // Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t\n\t    var Snap = function (root) {\n\t        Snap.version = \"0.5.1\";\n\t        /*\\\n\t         * Snap\n\t         [ method ]\n\t         **\n\t         * Creates a drawing surface or wraps existing SVG element.\n\t         **\n\t         - width (number|string) width of surface\n\t         - height (number|string) height of surface\n\t         * or\n\t         - DOM (SVGElement) element to be wrapped into Snap structure\n\t         * or\n\t         - array (array) array of elements (will return set of elements)\n\t         * or\n\t         - query (string) CSS query selector\n\t         = (object) @Element\n\t        \\*/\n\t        function Snap(w, h) {\n\t            if (w) {\n\t                if (w.nodeType) {\n\t                    return wrap(w);\n\t                }\n\t                if (is(w, \"array\") && Snap.set) {\n\t                    return Snap.set.apply(Snap, w);\n\t                }\n\t                if (w instanceof Element) {\n\t                    return w;\n\t                }\n\t                if (h == null) {\n\t                    // try {\n\t                    w = glob.doc.querySelector(String(w));\n\t                    return wrap(w);\n\t                    // } catch (e) {\n\t                    // return null;\n\t                    // }\n\t                }\n\t            }\n\t            w = w == null ? \"100%\" : w;\n\t            h = h == null ? \"100%\" : h;\n\t            return new Paper(w, h);\n\t        }\n\t        Snap.toString = function () {\n\t            return \"Snap v\" + this.version;\n\t        };\n\t        Snap._ = {};\n\t        var glob = {\n\t            win: root.window,\n\t            doc: root.window.document\n\t        };\n\t        Snap._.glob = glob;\n\t        var has = \"hasOwnProperty\",\n\t            Str = String,\n\t            toFloat = parseFloat,\n\t            toInt = parseInt,\n\t            math = Math,\n\t            mmax = math.max,\n\t            mmin = math.min,\n\t            abs = math.abs,\n\t            pow = math.pow,\n\t            PI = math.PI,\n\t            round = math.round,\n\t            E = \"\",\n\t            S = \" \",\n\t            objectToString = Object.prototype.toString,\n\t            ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t            colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t            bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t            separator = Snap._.separator = /[,\\s]+/,\n\t            whitespace = /[\\s]/g,\n\t            commaSpaces = /[\\s]*,[\\s]*/,\n\t            hsrg = { hs: 1, rg: 1 },\n\t            pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t            tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t            pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n\t            idgen = 0,\n\t            idprefix = \"S\" + (+new Date()).toString(36),\n\t            ID = function ID(el) {\n\t            return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t        },\n\t            xlink = \"http://www.w3.org/1999/xlink\",\n\t            xmlns = \"http://www.w3.org/2000/svg\",\n\t            hub = {},\n\t\n\t        /*\\\n\t         * Snap.url\n\t         [ method ]\n\t         **\n\t         * Wraps path into `\"url('<path>')\"`.\n\t         - value (string) path\n\t         = (string) wrapped path\n\t        \\*/\n\t        URL = Snap.url = function (url) {\n\t            return \"url('#\" + url + \"')\";\n\t        };\n\t\n\t        function $(el, attr) {\n\t            if (attr) {\n\t                if (el == \"#text\") {\n\t                    el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t                }\n\t                if (el == \"#comment\") {\n\t                    el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t                }\n\t                if (typeof el == \"string\") {\n\t                    el = $(el);\n\t                }\n\t                if (typeof attr == \"string\") {\n\t                    if (el.nodeType == 1) {\n\t                        if (attr.substring(0, 6) == \"xlink:\") {\n\t                            return el.getAttributeNS(xlink, attr.substring(6));\n\t                        }\n\t                        if (attr.substring(0, 4) == \"xml:\") {\n\t                            return el.getAttributeNS(xmlns, attr.substring(4));\n\t                        }\n\t                        return el.getAttribute(attr);\n\t                    } else if (attr == \"text\") {\n\t                        return el.nodeValue;\n\t                    } else {\n\t                        return null;\n\t                    }\n\t                }\n\t                if (el.nodeType == 1) {\n\t                    for (var key in attr) {\n\t                        if (attr[has](key)) {\n\t                            var val = Str(attr[key]);\n\t                            if (val) {\n\t                                if (key.substring(0, 6) == \"xlink:\") {\n\t                                    el.setAttributeNS(xlink, key.substring(6), val);\n\t                                } else if (key.substring(0, 4) == \"xml:\") {\n\t                                    el.setAttributeNS(xmlns, key.substring(4), val);\n\t                                } else {\n\t                                    el.setAttribute(key, val);\n\t                                }\n\t                            } else {\n\t                                el.removeAttribute(key);\n\t                            }\n\t                        }\n\t                    }\n\t                } else if (\"text\" in attr) {\n\t                    el.nodeValue = attr.text;\n\t                }\n\t            } else {\n\t                el = glob.doc.createElementNS(xmlns, el);\n\t            }\n\t            return el;\n\t        }\n\t        Snap._.$ = $;\n\t        Snap._.id = ID;\n\t        function getAttrs(el) {\n\t            var attrs = el.attributes,\n\t                name,\n\t                out = {};\n\t            for (var i = 0; i < attrs.length; i++) {\n\t                if (attrs[i].namespaceURI == xlink) {\n\t                    name = \"xlink:\";\n\t                } else {\n\t                    name = \"\";\n\t                }\n\t                name += attrs[i].name;\n\t                out[name] = attrs[i].textContent;\n\t            }\n\t            return out;\n\t        }\n\t        function is(o, type) {\n\t            type = Str.prototype.toLowerCase.call(type);\n\t            if (type == \"finite\") {\n\t                return isFinite(o);\n\t            }\n\t            if (type == \"array\" && (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t                return true;\n\t            }\n\t            return type == \"null\" && o === null || type == (typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) && o !== null || type == \"object\" && o === Object(o) || objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t        }\n\t        /*\\\n\t         * Snap.format\n\t         [ method ]\n\t         **\n\t         * Replaces construction of type `{<name>}` to the corresponding argument\n\t         **\n\t         - token (string) string to format\n\t         - json (object) object which properties are used as a replacement\n\t         = (string) formatted string\n\t         > Usage\n\t         | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t         | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t         |     x: 10,\n\t         |     y: 20,\n\t         |     dim: {\n\t         |         width: 40,\n\t         |         height: 50,\n\t         |         \"negative width\": -40\n\t         |     }\n\t         | }));\n\t        \\*/\n\t        Snap.format = function () {\n\t            var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t                objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g,\n\t                // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function replacer(all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t            return function (str, obj) {\n\t                return Str(str).replace(tokenRegex, function (all, key) {\n\t                    return replacer(all, key, obj);\n\t                });\n\t            };\n\t        }();\n\t        function clone(obj) {\n\t            if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t                return obj;\n\t            }\n\t            var res = new obj.constructor();\n\t            for (var key in obj) {\n\t                if (obj[has](key)) {\n\t                    res[key] = clone(obj[key]);\n\t                }\n\t            }return res;\n\t        }\n\t        Snap._.clone = clone;\n\t        function repush(array, item) {\n\t            for (var i = 0, ii = array.length; i < ii; i++) {\n\t                if (array[i] === item) {\n\t                    return array.push(array.splice(i, 1)[0]);\n\t                }\n\t            }\n\t        }\n\t        function cacher(f, scope, postprocessor) {\n\t            function newf() {\n\t                var arg = Array.prototype.slice.call(arguments, 0),\n\t                    args = arg.join(\"\\u2400\"),\n\t                    cache = newf.cache = newf.cache || {},\n\t                    count = newf.count = newf.count || [];\n\t                if (cache[has](args)) {\n\t                    repush(count, args);\n\t                    return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t                }\n\t                count.length >= 1e3 && delete cache[count.shift()];\n\t                count.push(args);\n\t                cache[args] = f.apply(scope, arg);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            return newf;\n\t        }\n\t        Snap._.cacher = cacher;\n\t        function angle(x1, y1, x2, y2, x3, y3) {\n\t            if (x3 == null) {\n\t                var x = x1 - x2,\n\t                    y = y1 - y2;\n\t                if (!x && !y) {\n\t                    return 0;\n\t                }\n\t                return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t            } else {\n\t                return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t            }\n\t        }\n\t        function rad(deg) {\n\t            return deg % 360 * PI / 180;\n\t        }\n\t        function deg(rad) {\n\t            return rad * 180 / PI % 360;\n\t        }\n\t        function x_y() {\n\t            return this.x + S + this.y;\n\t        }\n\t        function x_y_w_h() {\n\t            return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t        }\n\t\n\t        /*\\\n\t         * Snap.rad\n\t         [ method ]\n\t         **\n\t         * Transform angle to radians\n\t         - deg (number) angle in degrees\n\t         = (number) angle in radians\n\t        \\*/\n\t        Snap.rad = rad;\n\t        /*\\\n\t         * Snap.deg\n\t         [ method ]\n\t         **\n\t         * Transform angle to degrees\n\t         - rad (number) angle in radians\n\t         = (number) angle in degrees\n\t        \\*/\n\t        Snap.deg = deg;\n\t        /*\\\n\t         * Snap.sin\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) sin\n\t        \\*/\n\t        Snap.sin = function (angle) {\n\t            return math.sin(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.tan\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) tan\n\t        \\*/\n\t        Snap.tan = function (angle) {\n\t            return math.tan(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.cos\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) cos\n\t        \\*/\n\t        Snap.cos = function (angle) {\n\t            return math.cos(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.asin\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) asin in degrees\n\t        \\*/\n\t        Snap.asin = function (num) {\n\t            return Snap.deg(math.asin(num));\n\t        };\n\t        /*\\\n\t         * Snap.acos\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) acos in degrees\n\t        \\*/\n\t        Snap.acos = function (num) {\n\t            return Snap.deg(math.acos(num));\n\t        };\n\t        /*\\\n\t         * Snap.atan\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) atan in degrees\n\t        \\*/\n\t        Snap.atan = function (num) {\n\t            return Snap.deg(math.atan(num));\n\t        };\n\t        /*\\\n\t         * Snap.atan2\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) atan2 in degrees\n\t        \\*/\n\t        Snap.atan2 = function (num) {\n\t            return Snap.deg(math.atan2(num));\n\t        };\n\t        /*\\\n\t         * Snap.angle\n\t         [ method ]\n\t         **\n\t         * Returns an angle between two or three points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         - x3 (number) #optional x coord of third point\n\t         - y3 (number) #optional y coord of third point\n\t         = (number) angle in degrees\n\t        \\*/\n\t        Snap.angle = angle;\n\t        /*\\\n\t         * Snap.len\n\t         [ method ]\n\t         **\n\t         * Returns distance between two points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         = (number) distance\n\t        \\*/\n\t        Snap.len = function (x1, y1, x2, y2) {\n\t            return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t        };\n\t        /*\\\n\t         * Snap.len2\n\t         [ method ]\n\t         **\n\t         * Returns squared distance between two points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         = (number) distance\n\t        \\*/\n\t        Snap.len2 = function (x1, y1, x2, y2) {\n\t            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t        };\n\t        /*\\\n\t         * Snap.closestPoint\n\t         [ method ]\n\t         **\n\t         * Returns closest point to a given one on a given path.\n\t         - path (Element) path element\n\t         - x (number) x coord of a point\n\t         - y (number) y coord of a point\n\t         = (object) in format\n\t         {\n\t            x (number) x coord of the point on the path\n\t            y (number) y coord of the point on the path\n\t            length (number) length of the path to the point\n\t            distance (number) distance from the given point to the path\n\t         }\n\t        \\*/\n\t        // Copied from http://bl.ocks.org/mbostock/8027637\n\t        Snap.closestPoint = function (path, x, y) {\n\t            function distance2(p) {\n\t                var dx = p.x - x,\n\t                    dy = p.y - y;\n\t                return dx * dx + dy * dy;\n\t            }\n\t            var pathNode = path.node,\n\t                pathLength = pathNode.getTotalLength(),\n\t                precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t                best,\n\t                bestLength,\n\t                bestDistance = Infinity;\n\t\n\t            // linear scan for coarse approximation\n\t            for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t                if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t                    best = scan;\n\t                    bestLength = scanLength;\n\t                    bestDistance = scanDistance;\n\t                }\n\t            }\n\t\n\t            // binary search for precise estimate\n\t            precision *= .5;\n\t            while (precision > .5) {\n\t                var before, after, beforeLength, afterLength, beforeDistance, afterDistance;\n\t                if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t                    best = before;\n\t                    bestLength = beforeLength;\n\t                    bestDistance = beforeDistance;\n\t                } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t                    best = after;\n\t                    bestLength = afterLength;\n\t                    bestDistance = afterDistance;\n\t                } else {\n\t                    precision *= .5;\n\t                }\n\t            }\n\t\n\t            best = {\n\t                x: best.x,\n\t                y: best.y,\n\t                length: bestLength,\n\t                distance: Math.sqrt(bestDistance)\n\t            };\n\t            return best;\n\t        };\n\t        /*\\\n\t         * Snap.is\n\t         [ method ]\n\t         **\n\t         * Handy replacement for the `typeof` operator\n\t         - o (…) any object or primitive\n\t         - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t         = (boolean) `true` if given value is of given type\n\t        \\*/\n\t        Snap.is = is;\n\t        /*\\\n\t         * Snap.snapTo\n\t         [ method ]\n\t         **\n\t         * Snaps given value to given grid\n\t         - values (array|number) given array of values or step of the grid\n\t         - value (number) value to adjust\n\t         - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t         = (number) adjusted value\n\t        \\*/\n\t        Snap.snapTo = function (values, value, tolerance) {\n\t            tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t            if (is(values, \"array\")) {\n\t                var i = values.length;\n\t                while (i--) {\n\t                    if (abs(values[i] - value) <= tolerance) {\n\t                        return values[i];\n\t                    }\n\t                }\n\t            } else {\n\t                values = +values;\n\t                var rem = value % values;\n\t                if (rem < tolerance) {\n\t                    return value - rem;\n\t                }\n\t                if (rem > values - tolerance) {\n\t                    return value - rem + values;\n\t                }\n\t            }\n\t            return value;\n\t        };\n\t        // Colour\n\t        /*\\\n\t         * Snap.getRGB\n\t         [ method ]\n\t         **\n\t         * Parses color string as RGB object\n\t         - color (string) color string in one of the following formats:\n\t         # <ul>\n\t         #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t         #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t         #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t         #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t         #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t         #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t         #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t         #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t         #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t         #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         # </ul>\n\t         * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••,\n\t         o     error (boolean) true if string can't be parsed\n\t         o }\n\t        \\*/\n\t        Snap.getRGB = cacher(function (colour) {\n\t            if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t            }\n\t            if (colour == \"none\") {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString };\n\t            }\n\t            !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = _toHex(colour));\n\t            if (!colour) {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t            }\n\t            var res,\n\t                red,\n\t                green,\n\t                blue,\n\t                opacity,\n\t                t,\n\t                values,\n\t                rgb = colour.match(colourRegExp);\n\t            if (rgb) {\n\t                if (rgb[2]) {\n\t                    blue = toInt(rgb[2].substring(5), 16);\n\t                    green = toInt(rgb[2].substring(3, 5), 16);\n\t                    red = toInt(rgb[2].substring(1, 3), 16);\n\t                }\n\t                if (rgb[3]) {\n\t                    blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                    green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                    red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t                }\n\t                if (rgb[4]) {\n\t                    values = rgb[4].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                }\n\t                if (rgb[5]) {\n\t                    values = rgb[5].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red /= 100);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green /= 100);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue /= 100);\n\t                    (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                    return Snap.hsb2rgb(red, green, blue, opacity);\n\t                }\n\t                if (rgb[6]) {\n\t                    values = rgb[6].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red /= 100);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green /= 100);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue /= 100);\n\t                    (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                    return Snap.hsl2rgb(red, green, blue, opacity);\n\t                }\n\t                red = mmin(math.round(red), 255);\n\t                green = mmin(math.round(green), 255);\n\t                blue = mmin(math.round(blue), 255);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                rgb = { r: red, g: green, b: blue, toString: rgbtoString };\n\t                rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n\t                rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t                return rgb;\n\t            }\n\t            return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t        }, Snap);\n\t        /*\\\n\t         * Snap.hsb\n\t         [ method ]\n\t         **\n\t         * Converts HSB values to a hex representation of the color\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - b (number) value or brightness\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.hsb = cacher(function (h, s, b) {\n\t            return Snap.hsb2rgb(h, s, b).hex;\n\t        });\n\t        /*\\\n\t         * Snap.hsl\n\t         [ method ]\n\t         **\n\t         * Converts HSL values to a hex representation of the color\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - l (number) luminosity\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.hsl = cacher(function (h, s, l) {\n\t            return Snap.hsl2rgb(h, s, l).hex;\n\t        });\n\t        /*\\\n\t         * Snap.rgb\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to a hex representation of the color\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.rgb = cacher(function (r, g, b, o) {\n\t            if (is(o, \"finite\")) {\n\t                var round = math.round;\n\t                return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t            }\n\t            return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n\t        });\n\t        var _toHex = function toHex(color) {\n\t            var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t                red = \"rgb(255, 0, 0)\";\n\t            _toHex = cacher(function (color) {\n\t                if (color.toLowerCase() == \"red\") {\n\t                    return red;\n\t                }\n\t                i.style.color = red;\n\t                i.style.color = color;\n\t                var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t                return out == red ? null : out;\n\t            });\n\t            return _toHex(color);\n\t        },\n\t            hsbtoString = function hsbtoString() {\n\t            return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t        },\n\t            hsltoString = function hsltoString() {\n\t            return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t        },\n\t            rgbtoString = function rgbtoString() {\n\t            return this.opacity == 1 || this.opacity == null ? this.hex : \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t        },\n\t            prepareRGB = function prepareRGB(r, g, b) {\n\t            if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t                b = r.b;\n\t                g = r.g;\n\t                r = r.r;\n\t            }\n\t            if (g == null && is(r, string)) {\n\t                var clr = Snap.getRGB(r);\n\t                r = clr.r;\n\t                g = clr.g;\n\t                b = clr.b;\n\t            }\n\t            if (r > 1 || g > 1 || b > 1) {\n\t                r /= 255;\n\t                g /= 255;\n\t                b /= 255;\n\t            }\n\t\n\t            return [r, g, b];\n\t        },\n\t            packageRGB = function packageRGB(r, g, b, o) {\n\t            r = math.round(r * 255);\n\t            g = math.round(g * 255);\n\t            b = math.round(b * 255);\n\t            var rgb = {\n\t                r: r,\n\t                g: g,\n\t                b: b,\n\t                opacity: is(o, \"finite\") ? o : 1,\n\t                hex: Snap.rgb(r, g, b),\n\t                toString: rgbtoString\n\t            };\n\t            is(o, \"finite\") && (rgb.opacity = o);\n\t            return rgb;\n\t        };\n\t        /*\\\n\t         * Snap.color\n\t         [ method ]\n\t         **\n\t         * Parses the color string and returns an object featuring the color's component values\n\t         - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t         = (object) Combined RGB/HSB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••,\n\t         o     error (boolean) `true` if string can't be parsed,\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     v (number) value (brightness),\n\t         o     l (number) lightness\n\t         o }\n\t        \\*/\n\t        Snap.color = function (clr) {\n\t            var rgb;\n\t            if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t                rgb = Snap.hsb2rgb(clr);\n\t                clr.r = rgb.r;\n\t                clr.g = rgb.g;\n\t                clr.b = rgb.b;\n\t                clr.opacity = 1;\n\t                clr.hex = rgb.hex;\n\t            } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t                rgb = Snap.hsl2rgb(clr);\n\t                clr.r = rgb.r;\n\t                clr.g = rgb.g;\n\t                clr.b = rgb.b;\n\t                clr.opacity = 1;\n\t                clr.hex = rgb.hex;\n\t            } else {\n\t                if (is(clr, \"string\")) {\n\t                    clr = Snap.getRGB(clr);\n\t                }\n\t                if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t                    rgb = Snap.rgb2hsl(clr);\n\t                    clr.h = rgb.h;\n\t                    clr.s = rgb.s;\n\t                    clr.l = rgb.l;\n\t                    rgb = Snap.rgb2hsb(clr);\n\t                    clr.v = rgb.b;\n\t                } else {\n\t                    clr = { hex: \"none\" };\n\t                    clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t                    clr.error = 1;\n\t                }\n\t            }\n\t            clr.toString = rgbtoString;\n\t            return clr;\n\t        };\n\t        /*\\\n\t         * Snap.hsb2rgb\n\t         [ method ]\n\t         **\n\t         * Converts HSB values to an RGB object\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - v (number) value or brightness\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••\n\t         o }\n\t        \\*/\n\t        Snap.hsb2rgb = function (h, s, v, o) {\n\t            if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t                v = h.b;\n\t                s = h.s;\n\t                o = h.o;\n\t                h = h.h;\n\t            }\n\t            h *= 360;\n\t            var R, G, B, X, C;\n\t            h = h % 360 / 60;\n\t            C = v * s;\n\t            X = C * (1 - abs(h % 2 - 1));\n\t            R = G = B = v - C;\n\t\n\t            h = ~~h;\n\t            R += [C, X, 0, 0, X, C][h];\n\t            G += [X, C, C, X, 0, 0][h];\n\t            B += [0, 0, X, C, C, X][h];\n\t            return packageRGB(R, G, B, o);\n\t        };\n\t        /*\\\n\t         * Snap.hsl2rgb\n\t         [ method ]\n\t         **\n\t         * Converts HSL values to an RGB object\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - l (number) luminosity\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••\n\t         o }\n\t        \\*/\n\t        Snap.hsl2rgb = function (h, s, l, o) {\n\t            if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t                l = h.l;\n\t                s = h.s;\n\t                h = h.h;\n\t            }\n\t            if (h > 1 || s > 1 || l > 1) {\n\t                h /= 360;\n\t                s /= 100;\n\t                l /= 100;\n\t            }\n\t            h *= 360;\n\t            var R, G, B, X, C;\n\t            h = h % 360 / 60;\n\t            C = 2 * s * (l < .5 ? l : 1 - l);\n\t            X = C * (1 - abs(h % 2 - 1));\n\t            R = G = B = l - C / 2;\n\t\n\t            h = ~~h;\n\t            R += [C, X, 0, 0, X, C][h];\n\t            G += [X, C, C, X, 0, 0][h];\n\t            B += [0, 0, X, C, C, X][h];\n\t            return packageRGB(R, G, B, o);\n\t        };\n\t        /*\\\n\t         * Snap.rgb2hsb\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to an HSB object\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (object) HSB object in the following format:\n\t         o {\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     b (number) brightness\n\t         o }\n\t        \\*/\n\t        Snap.rgb2hsb = function (r, g, b) {\n\t            b = prepareRGB(r, g, b);\n\t            r = b[0];\n\t            g = b[1];\n\t            b = b[2];\n\t\n\t            var H, S, V, C;\n\t            V = mmax(r, g, b);\n\t            C = V - mmin(r, g, b);\n\t            H = C == 0 ? null : V == r ? (g - b) / C : V == g ? (b - r) / C + 2 : (r - g) / C + 4;\n\t            H = (H + 360) % 6 * 60 / 360;\n\t            S = C == 0 ? 0 : C / V;\n\t            return { h: H, s: S, b: V, toString: hsbtoString };\n\t        };\n\t        /*\\\n\t         * Snap.rgb2hsl\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to an HSL object\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (object) HSL object in the following format:\n\t         o {\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     l (number) luminosity\n\t         o }\n\t        \\*/\n\t        Snap.rgb2hsl = function (r, g, b) {\n\t            b = prepareRGB(r, g, b);\n\t            r = b[0];\n\t            g = b[1];\n\t            b = b[2];\n\t\n\t            var H, S, L, M, m, C;\n\t            M = mmax(r, g, b);\n\t            m = mmin(r, g, b);\n\t            C = M - m;\n\t            H = C == 0 ? null : M == r ? (g - b) / C : M == g ? (b - r) / C + 2 : (r - g) / C + 4;\n\t            H = (H + 360) % 6 * 60 / 360;\n\t            L = (M + m) / 2;\n\t            S = C == 0 ? 0 : L < .5 ? C / (2 * L) : C / (2 - 2 * L);\n\t            return { h: H, s: S, l: L, toString: hsltoString };\n\t        };\n\t\n\t        // Transformations\n\t        /*\\\n\t         * Snap.parsePathString\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Parses given path string into an array of arrays of path segments\n\t         - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t         = (array) array of segments\n\t        \\*/\n\t        Snap.parsePathString = function (pathString) {\n\t            if (!pathString) {\n\t                return null;\n\t            }\n\t            var pth = Snap.path(pathString);\n\t            if (pth.arr) {\n\t                return Snap.path.clone(pth.arr);\n\t            }\n\t\n\t            var paramCounts = { a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0 },\n\t                data = [];\n\t            if (is(pathString, \"array\") && is(pathString[0], \"array\")) {\n\t                // rough assumption\n\t                data = Snap.path.clone(pathString);\n\t            }\n\t            if (!data.length) {\n\t                Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                    var params = [],\n\t                        name = b.toLowerCase();\n\t                    c.replace(pathValues, function (a, b) {\n\t                        b && params.push(+b);\n\t                    });\n\t                    if (name == \"m\" && params.length > 2) {\n\t                        data.push([b].concat(params.splice(0, 2)));\n\t                        name = \"l\";\n\t                        b = b == \"m\" ? \"l\" : \"L\";\n\t                    }\n\t                    if (name == \"o\" && params.length == 1) {\n\t                        data.push([b, params[0]]);\n\t                    }\n\t                    if (name == \"r\") {\n\t                        data.push([b].concat(params));\n\t                    } else while (params.length >= paramCounts[name]) {\n\t                        data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                        if (!paramCounts[name]) {\n\t                            break;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            data.toString = Snap.path.toString;\n\t            pth.arr = Snap.path.clone(data);\n\t            return data;\n\t        };\n\t        /*\\\n\t         * Snap.parseTransformString\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Parses given transform string into an array of transformations\n\t         - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t         = (array) array of transformations\n\t        \\*/\n\t        var parseTransformString = Snap.parseTransformString = function (TString) {\n\t            if (!TString) {\n\t                return null;\n\t            }\n\t            var paramCounts = { r: 3, s: 4, t: 2, m: 6 },\n\t                data = [];\n\t            if (is(TString, \"array\") && is(TString[0], \"array\")) {\n\t                // rough assumption\n\t                data = Snap.path.clone(TString);\n\t            }\n\t            if (!data.length) {\n\t                Str(TString).replace(tCommand, function (a, b, c) {\n\t                    var params = [],\n\t                        name = b.toLowerCase();\n\t                    c.replace(pathValues, function (a, b) {\n\t                        b && params.push(+b);\n\t                    });\n\t                    data.push([b].concat(params));\n\t                });\n\t            }\n\t            data.toString = Snap.path.toString;\n\t            return data;\n\t        };\n\t        function svgTransform2string(tstr) {\n\t            var res = [];\n\t            tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t                params = params.split(/\\s*,\\s*|\\s+/);\n\t                if (name == \"rotate\" && params.length == 1) {\n\t                    params.push(0, 0);\n\t                }\n\t                if (name == \"scale\") {\n\t                    if (params.length > 2) {\n\t                        params = params.slice(0, 2);\n\t                    } else if (params.length == 2) {\n\t                        params.push(0, 0);\n\t                    }\n\t                    if (params.length == 1) {\n\t                        params.push(params[0], 0, 0);\n\t                    }\n\t                }\n\t                if (name == \"skewX\") {\n\t                    res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t                } else if (name == \"skewY\") {\n\t                    res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t                } else {\n\t                    res.push([name.charAt(0)].concat(params));\n\t                }\n\t                return all;\n\t            });\n\t            return res;\n\t        }\n\t        Snap._.svgTransform2string = svgTransform2string;\n\t        Snap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\t        function transform2matrix(tstr, bbox) {\n\t            var tdata = parseTransformString(tstr),\n\t                m = new Snap.Matrix();\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 2) {\n\t                        m.translate(t[1], 0);\n\t                    } else if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || bbox;\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || bbox;\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.scale(t[1], t[1], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[1], t[2], t[3]);\n\t                            }\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                }\n\t            }\n\t            return m;\n\t        }\n\t        Snap._.transform2matrix = transform2matrix;\n\t        Snap._unit2px = unit2px;\n\t        var contains = glob.doc.contains || glob.doc.compareDocumentPosition ? function (a, b) {\n\t            var adown = a.nodeType == 9 ? a.documentElement : a,\n\t                bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t        } : function (a, b) {\n\t            if (b) {\n\t                while (b) {\n\t                    b = b.parentNode;\n\t                    if (b == a) {\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        };\n\t        function getSomeDefs(el) {\n\t            var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || el.node.parentNode && wrap(el.node.parentNode) || Snap.select(\"svg\") || Snap(0, 0),\n\t                pdefs = p.select(\"defs\"),\n\t                defs = pdefs == null ? false : pdefs.node;\n\t            if (!defs) {\n\t                defs = make(\"defs\", p.node).node;\n\t            }\n\t            return defs;\n\t        }\n\t        function getSomeSVG(el) {\n\t            return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t        }\n\t        Snap._.getSomeDefs = getSomeDefs;\n\t        Snap._.getSomeSVG = getSomeSVG;\n\t        function unit2px(el, name, value) {\n\t            var svg = getSomeSVG(el).node,\n\t                out = {},\n\t                mgr = svg.querySelector(\".svg---mgr\");\n\t            if (!mgr) {\n\t                mgr = $(\"rect\");\n\t                $(mgr, { x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\" });\n\t                svg.appendChild(mgr);\n\t            }\n\t            function getW(val) {\n\t                if (val == null) {\n\t                    return E;\n\t                }\n\t                if (val == +val) {\n\t                    return val;\n\t                }\n\t                $(mgr, { width: val });\n\t                try {\n\t                    return mgr.getBBox().width;\n\t                } catch (e) {\n\t                    return 0;\n\t                }\n\t            }\n\t            function getH(val) {\n\t                if (val == null) {\n\t                    return E;\n\t                }\n\t                if (val == +val) {\n\t                    return val;\n\t                }\n\t                $(mgr, { height: val });\n\t                try {\n\t                    return mgr.getBBox().height;\n\t                } catch (e) {\n\t                    return 0;\n\t                }\n\t            }\n\t            function set(nam, f) {\n\t                if (name == null) {\n\t                    out[nam] = f(el.attr(nam) || 0);\n\t                } else if (nam == name) {\n\t                    out = f(value == null ? el.attr(nam) || 0 : value);\n\t                }\n\t            }\n\t            switch (el.type) {\n\t                case \"rect\":\n\t                    set(\"rx\", getW);\n\t                    set(\"ry\", getH);\n\t                case \"image\":\n\t                    set(\"width\", getW);\n\t                    set(\"height\", getH);\n\t                case \"text\":\n\t                    set(\"x\", getW);\n\t                    set(\"y\", getH);\n\t                    break;\n\t                case \"circle\":\n\t                    set(\"cx\", getW);\n\t                    set(\"cy\", getH);\n\t                    set(\"r\", getW);\n\t                    break;\n\t                case \"ellipse\":\n\t                    set(\"cx\", getW);\n\t                    set(\"cy\", getH);\n\t                    set(\"rx\", getW);\n\t                    set(\"ry\", getH);\n\t                    break;\n\t                case \"line\":\n\t                    set(\"x1\", getW);\n\t                    set(\"x2\", getW);\n\t                    set(\"y1\", getH);\n\t                    set(\"y2\", getH);\n\t                    break;\n\t                case \"marker\":\n\t                    set(\"refX\", getW);\n\t                    set(\"markerWidth\", getW);\n\t                    set(\"refY\", getH);\n\t                    set(\"markerHeight\", getH);\n\t                    break;\n\t                case \"radialGradient\":\n\t                    set(\"fx\", getW);\n\t                    set(\"fy\", getH);\n\t                    break;\n\t                case \"tspan\":\n\t                    set(\"dx\", getW);\n\t                    set(\"dy\", getH);\n\t                    break;\n\t                default:\n\t                    set(name, getW);\n\t            }\n\t            svg.removeChild(mgr);\n\t            return out;\n\t        }\n\t        /*\\\n\t         * Snap.select\n\t         [ method ]\n\t         **\n\t         * Wraps a DOM element specified by CSS selector as @Element\n\t         - query (string) CSS selector of the element\n\t         = (Element) the current element\n\t        \\*/\n\t        Snap.select = function (query) {\n\t            query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t            return wrap(glob.doc.querySelector(query));\n\t        };\n\t        /*\\\n\t         * Snap.selectAll\n\t         [ method ]\n\t         **\n\t         * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t         - query (string) CSS selector of the element\n\t         = (Element) the current element\n\t        \\*/\n\t        Snap.selectAll = function (query) {\n\t            var nodelist = glob.doc.querySelectorAll(query),\n\t                set = (Snap.set || Array)();\n\t            for (var i = 0; i < nodelist.length; i++) {\n\t                set.push(wrap(nodelist[i]));\n\t            }\n\t            return set;\n\t        };\n\t\n\t        function add2group(list) {\n\t            if (!is(list, \"array\")) {\n\t                list = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var i = 0,\n\t                j = 0,\n\t                node = this.node;\n\t            while (this[i]) {\n\t                delete this[i++];\n\t            }for (i = 0; i < list.length; i++) {\n\t                if (list[i].type == \"set\") {\n\t                    list[i].forEach(function (el) {\n\t                        node.appendChild(el.node);\n\t                    });\n\t                } else {\n\t                    node.appendChild(list[i].node);\n\t                }\n\t            }\n\t            var children = node.childNodes;\n\t            for (i = 0; i < children.length; i++) {\n\t                this[j++] = wrap(children[i]);\n\t            }\n\t            return this;\n\t        }\n\t        // Hub garbage collector every 10s\n\t        setInterval(function () {\n\t            for (var key in hub) {\n\t                if (hub[has](key)) {\n\t                    var el = hub[key],\n\t                        node = el.node;\n\t                    if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t                        delete hub[key];\n\t                    }\n\t                }\n\t            }\n\t        }, 1e4);\n\t        function Element(el) {\n\t            if (el.snap in hub) {\n\t                return hub[el.snap];\n\t            }\n\t            var svg;\n\t            try {\n\t                svg = el.ownerSVGElement;\n\t            } catch (e) {}\n\t            /*\\\n\t             * Element.node\n\t             [ property (object) ]\n\t             **\n\t             * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t             > Usage\n\t             | // draw a circle at coordinate 10,10 with radius of 10\n\t             | var c = paper.circle(10, 10, 10);\n\t             | c.node.onclick = function () {\n\t             |     c.attr(\"fill\", \"red\");\n\t             | };\n\t            \\*/\n\t            this.node = el;\n\t            if (svg) {\n\t                this.paper = new Paper(svg);\n\t            }\n\t            /*\\\n\t             * Element.type\n\t             [ property (string) ]\n\t             **\n\t             * SVG tag name of the given element.\n\t            \\*/\n\t            this.type = el.tagName || el.nodeName;\n\t            var id = this.id = ID(this);\n\t            this.anims = {};\n\t            this._ = {\n\t                transform: []\n\t            };\n\t            el.snap = id;\n\t            hub[id] = this;\n\t            if (this.type == \"g\") {\n\t                this.add = add2group;\n\t            }\n\t            if (this.type in { g: 1, mask: 1, pattern: 1, symbol: 1 }) {\n\t                for (var method in Paper.prototype) {\n\t                    if (Paper.prototype[has](method)) {\n\t                        this[method] = Paper.prototype[method];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t          * Element.attr\n\t          [ method ]\n\t          **\n\t          * Gets or sets given attributes of the element.\n\t          **\n\t          - params (object) contains key-value pairs of attributes you want to set\n\t          * or\n\t          - param (string) name of the attribute\n\t          = (Element) the current element\n\t          * or\n\t          = (string) value of attribute\n\t          > Usage\n\t          | el.attr({\n\t          |     fill: \"#fc0\",\n\t          |     stroke: \"#000\",\n\t          |     strokeWidth: 2, // CamelCase...\n\t          |     \"fill-opacity\": 0.5, // or dash-separated names\n\t          |     width: \"*=2\" // prefixed values\n\t          | });\n\t          | console.log(el.attr(\"fill\")); // #fc0\n\t          * Prefixed values in format `\"+=10\"` supported. All four operations\n\t          * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t          * and `-`: `\"+=2em\"`.\n\t         \\*/\n\t        Element.prototype.attr = function (params, value) {\n\t            var el = this,\n\t                node = el.node;\n\t            if (!params) {\n\t                if (node.nodeType != 1) {\n\t                    return {\n\t                        text: node.nodeValue\n\t                    };\n\t                }\n\t                var attr = node.attributes,\n\t                    out = {};\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    out[attr[i].nodeName] = attr[i].nodeValue;\n\t                }\n\t                return out;\n\t            }\n\t            if (is(params, \"string\")) {\n\t                if (arguments.length > 1) {\n\t                    var json = {};\n\t                    json[params] = value;\n\t                    params = json;\n\t                } else {\n\t                    return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t                }\n\t            }\n\t            for (var att in params) {\n\t                if (params[has](att)) {\n\t                    eve(\"snap.util.attr.\" + att, el, params[att]);\n\t                }\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Snap.parse\n\t         [ method ]\n\t         **\n\t         * Parses SVG fragment and converts it into a @Fragment\n\t         **\n\t         - svg (string) SVG string\n\t         = (Fragment) the @Fragment\n\t        \\*/\n\t        Snap.parse = function (svg) {\n\t            var f = glob.doc.createDocumentFragment(),\n\t                full = true,\n\t                div = glob.doc.createElement(\"div\");\n\t            svg = Str(svg);\n\t            if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t                svg = \"<svg>\" + svg + \"</svg>\";\n\t                full = false;\n\t            }\n\t            div.innerHTML = svg;\n\t            svg = div.getElementsByTagName(\"svg\")[0];\n\t            if (svg) {\n\t                if (full) {\n\t                    f = svg;\n\t                } else {\n\t                    while (svg.firstChild) {\n\t                        f.appendChild(svg.firstChild);\n\t                    }\n\t                }\n\t            }\n\t            return new Fragment(f);\n\t        };\n\t        function Fragment(frag) {\n\t            this.node = frag;\n\t        }\n\t        /*\\\n\t         * Snap.fragment\n\t         [ method ]\n\t         **\n\t         * Creates a DOM fragment from a given list of elements or strings\n\t         **\n\t         - varargs (…) SVG string\n\t         = (Fragment) the @Fragment\n\t        \\*/\n\t        Snap.fragment = function () {\n\t            var args = Array.prototype.slice.call(arguments, 0),\n\t                f = glob.doc.createDocumentFragment();\n\t            for (var i = 0, ii = args.length; i < ii; i++) {\n\t                var item = args[i];\n\t                if (item.node && item.node.nodeType) {\n\t                    f.appendChild(item.node);\n\t                }\n\t                if (item.nodeType) {\n\t                    f.appendChild(item);\n\t                }\n\t                if (typeof item == \"string\") {\n\t                    f.appendChild(Snap.parse(item).node);\n\t                }\n\t            }\n\t            return new Fragment(f);\n\t        };\n\t\n\t        function make(name, parent) {\n\t            var res = $(name);\n\t            parent.appendChild(res);\n\t            var el = wrap(res);\n\t            return el;\n\t        }\n\t        function Paper(w, h) {\n\t            var res,\n\t                desc,\n\t                defs,\n\t                proto = Paper.prototype;\n\t            if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n\t                if (w.snap in hub) {\n\t                    return hub[w.snap];\n\t                }\n\t                var doc = w.ownerDocument;\n\t                res = new Element(w);\n\t                desc = w.getElementsByTagName(\"desc\")[0];\n\t                defs = w.getElementsByTagName(\"defs\")[0];\n\t                if (!desc) {\n\t                    desc = $(\"desc\");\n\t                    desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t                    res.node.appendChild(desc);\n\t                }\n\t                if (!defs) {\n\t                    defs = $(\"defs\");\n\t                    res.node.appendChild(defs);\n\t                }\n\t                res.defs = defs;\n\t                for (var key in proto) {\n\t                    if (proto[has](key)) {\n\t                        res[key] = proto[key];\n\t                    }\n\t                }res.paper = res.root = res;\n\t            } else {\n\t                res = make(\"svg\", glob.doc.body);\n\t                $(res.node, {\n\t                    height: h,\n\t                    version: 1.1,\n\t                    width: w,\n\t                    xmlns: xmlns\n\t                });\n\t            }\n\t            return res;\n\t        }\n\t        function wrap(dom) {\n\t            if (!dom) {\n\t                return dom;\n\t            }\n\t            if (dom instanceof Element || dom instanceof Fragment) {\n\t                return dom;\n\t            }\n\t            if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t                return new Paper(dom);\n\t            }\n\t            if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t                return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t            }\n\t            return new Element(dom);\n\t        }\n\t\n\t        Snap._.make = make;\n\t        Snap._.wrap = wrap;\n\t        /*\\\n\t         * Paper.el\n\t         [ method ]\n\t         **\n\t         * Creates an element on paper with a given name and no attributes\n\t         **\n\t         - name (string) tag name\n\t         - attr (object) attributes\n\t         = (Element) the current element\n\t         > Usage\n\t         | var c = paper.circle(10, 10, 10); // is the same as...\n\t         | var c = paper.el(\"circle\").attr({\n\t         |     cx: 10,\n\t         |     cy: 10,\n\t         |     r: 10\n\t         | });\n\t         | // and the same as\n\t         | var c = paper.el(\"circle\", {\n\t         |     cx: 10,\n\t         |     cy: 10,\n\t         |     r: 10\n\t         | });\n\t        \\*/\n\t        Paper.prototype.el = function (name, attr) {\n\t            var el = make(name, this.node);\n\t            attr && el.attr(attr);\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Element.children\n\t         [ method ]\n\t         **\n\t         * Returns array of all the children of the element.\n\t         = (array) array of Elements\n\t        \\*/\n\t        Element.prototype.children = function () {\n\t            var out = [],\n\t                ch = this.node.childNodes;\n\t            for (var i = 0, ii = ch.length; i < ii; i++) {\n\t                out[i] = Snap(ch[i]);\n\t            }\n\t            return out;\n\t        };\n\t        function jsonFiller(root, o) {\n\t            for (var i = 0, ii = root.length; i < ii; i++) {\n\t                var item = {\n\t                    type: root[i].type,\n\t                    attr: root[i].attr()\n\t                },\n\t                    children = root[i].children();\n\t                o.push(item);\n\t                if (children.length) {\n\t                    jsonFiller(children, item.childNodes = []);\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.toJSON\n\t         [ method ]\n\t         **\n\t         * Returns object representation of the given element and all its children.\n\t         = (object) in format\n\t         o {\n\t         o     type (string) this.type,\n\t         o     attr (object) attributes map,\n\t         o     childNodes (array) optional array of children in the same format\n\t         o }\n\t        \\*/\n\t        Element.prototype.toJSON = function () {\n\t            var out = [];\n\t            jsonFiller([this], out);\n\t            return out[0];\n\t        };\n\t        // default\n\t        eve.on(\"snap.util.getattr\", function () {\n\t            var att = eve.nt();\n\t            att = att.substring(att.lastIndexOf(\".\") + 1);\n\t            var css = att.replace(/[A-Z]/g, function (letter) {\n\t                return \"-\" + letter.toLowerCase();\n\t            });\n\t            if (cssAttr[has](css)) {\n\t                return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t            } else {\n\t                return $(this.node, att);\n\t            }\n\t        });\n\t        var cssAttr = {\n\t            \"alignment-baseline\": 0,\n\t            \"baseline-shift\": 0,\n\t            \"clip\": 0,\n\t            \"clip-path\": 0,\n\t            \"clip-rule\": 0,\n\t            \"color\": 0,\n\t            \"color-interpolation\": 0,\n\t            \"color-interpolation-filters\": 0,\n\t            \"color-profile\": 0,\n\t            \"color-rendering\": 0,\n\t            \"cursor\": 0,\n\t            \"direction\": 0,\n\t            \"display\": 0,\n\t            \"dominant-baseline\": 0,\n\t            \"enable-background\": 0,\n\t            \"fill\": 0,\n\t            \"fill-opacity\": 0,\n\t            \"fill-rule\": 0,\n\t            \"filter\": 0,\n\t            \"flood-color\": 0,\n\t            \"flood-opacity\": 0,\n\t            \"font\": 0,\n\t            \"font-family\": 0,\n\t            \"font-size\": 0,\n\t            \"font-size-adjust\": 0,\n\t            \"font-stretch\": 0,\n\t            \"font-style\": 0,\n\t            \"font-variant\": 0,\n\t            \"font-weight\": 0,\n\t            \"glyph-orientation-horizontal\": 0,\n\t            \"glyph-orientation-vertical\": 0,\n\t            \"image-rendering\": 0,\n\t            \"kerning\": 0,\n\t            \"letter-spacing\": 0,\n\t            \"lighting-color\": 0,\n\t            \"marker\": 0,\n\t            \"marker-end\": 0,\n\t            \"marker-mid\": 0,\n\t            \"marker-start\": 0,\n\t            \"mask\": 0,\n\t            \"opacity\": 0,\n\t            \"overflow\": 0,\n\t            \"pointer-events\": 0,\n\t            \"shape-rendering\": 0,\n\t            \"stop-color\": 0,\n\t            \"stop-opacity\": 0,\n\t            \"stroke\": 0,\n\t            \"stroke-dasharray\": 0,\n\t            \"stroke-dashoffset\": 0,\n\t            \"stroke-linecap\": 0,\n\t            \"stroke-linejoin\": 0,\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 0,\n\t            \"stroke-width\": 0,\n\t            \"text-anchor\": 0,\n\t            \"text-decoration\": 0,\n\t            \"text-rendering\": 0,\n\t            \"unicode-bidi\": 0,\n\t            \"visibility\": 0,\n\t            \"word-spacing\": 0,\n\t            \"writing-mode\": 0\n\t        };\n\t\n\t        eve.on(\"snap.util.attr\", function (value) {\n\t            var att = eve.nt(),\n\t                attr = {};\n\t            att = att.substring(att.lastIndexOf(\".\") + 1);\n\t            attr[att] = value;\n\t            var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t                return letter.toUpperCase();\n\t            }),\n\t                css = att.replace(/[A-Z]/g, function (letter) {\n\t                return \"-\" + letter.toLowerCase();\n\t            });\n\t            if (cssAttr[has](css)) {\n\t                this.node.style[style] = value == null ? E : value;\n\t            } else {\n\t                $(this.node, attr);\n\t            }\n\t        });\n\t        (function (proto) {})(Paper.prototype);\n\t\n\t        // simple ajax\n\t        /*\\\n\t         * Snap.ajax\n\t         [ method ]\n\t         **\n\t         * Simple implementation of Ajax\n\t         **\n\t         - url (string) URL\n\t         - postData (object|string) data for post request\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t         * or\n\t         - url (string) URL\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t         = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t        \\*/\n\t        Snap.ajax = function (url, postData, callback, scope) {\n\t            var req = new XMLHttpRequest(),\n\t                id = ID();\n\t            if (req) {\n\t                if (is(postData, \"function\")) {\n\t                    scope = callback;\n\t                    callback = postData;\n\t                    postData = null;\n\t                } else if (is(postData, \"object\")) {\n\t                    var pd = [];\n\t                    for (var key in postData) {\n\t                        if (postData.hasOwnProperty(key)) {\n\t                            pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t                        }\n\t                    }postData = pd.join(\"&\");\n\t                }\n\t                req.open(postData ? \"POST\" : \"GET\", url, true);\n\t                if (postData) {\n\t                    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t                    req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t                }\n\t                if (callback) {\n\t                    eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t                    eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t                    eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t                }\n\t                req.onreadystatechange = function () {\n\t                    if (req.readyState != 4) return;\n\t                    eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t                };\n\t                if (req.readyState == 4) {\n\t                    return req;\n\t                }\n\t                req.send(postData);\n\t                return req;\n\t            }\n\t        };\n\t        /*\\\n\t         * Snap.load\n\t         [ method ]\n\t         **\n\t         * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t         **\n\t         - url (string) URL\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t        \\*/\n\t        Snap.load = function (url, callback, scope) {\n\t            Snap.ajax(url, function (req) {\n\t                var f = Snap.parse(req.responseText);\n\t                scope ? callback.call(scope, f) : callback(f);\n\t            });\n\t        };\n\t        var getOffset = function getOffset(elem) {\n\t            var box = elem.getBoundingClientRect(),\n\t                doc = elem.ownerDocument,\n\t                body = doc.body,\n\t                docElem = doc.documentElement,\n\t                clientTop = docElem.clientTop || body.clientTop || 0,\n\t                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t                top = box.top + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop,\n\t                left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t            return {\n\t                y: top,\n\t                x: left\n\t            };\n\t        };\n\t        /*\\\n\t         * Snap.getElementByPoint\n\t         [ method ]\n\t         **\n\t         * Returns you topmost element under given point.\n\t         **\n\t         = (object) Snap element object\n\t         - x (number) x coordinate from the top left corner of the window\n\t         - y (number) y coordinate from the top left corner of the window\n\t         > Usage\n\t         | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t        \\*/\n\t        Snap.getElementByPoint = function (x, y) {\n\t            var paper = this,\n\t                svg = paper.canvas,\n\t                target = glob.doc.elementFromPoint(x, y);\n\t            if (glob.win.opera && target.tagName == \"svg\") {\n\t                var so = getOffset(target),\n\t                    sr = target.createSVGRect();\n\t                sr.x = x - so.x;\n\t                sr.y = y - so.y;\n\t                sr.width = sr.height = 1;\n\t                var hits = target.getIntersectionList(sr, null);\n\t                if (hits.length) {\n\t                    target = hits[hits.length - 1];\n\t                }\n\t            }\n\t            if (!target) {\n\t                return null;\n\t            }\n\t            return wrap(target);\n\t        };\n\t        /*\\\n\t         * Snap.plugin\n\t         [ method ]\n\t         **\n\t         * Let you write plugins. You pass in a function with five arguments, like this:\n\t         | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t         |     Snap.newmethod = function () {};\n\t         |     Element.prototype.newmethod = function () {};\n\t         |     Paper.prototype.newmethod = function () {};\n\t         | });\n\t         * Inside the function you have access to all main objects (and their\n\t         * prototypes). This allow you to extend anything you want.\n\t         **\n\t         - f (function) your plugin body\n\t        \\*/\n\t        Snap.plugin = function (f) {\n\t            f(Snap, Element, Paper, glob, Fragment);\n\t        };\n\t        glob.win.Snap = Snap;\n\t        return Snap;\n\t    }(window || this);\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            Str = String,\n\t            unit2px = Snap._unit2px,\n\t            $ = Snap._.$,\n\t            make = Snap._.make,\n\t            getSomeDefs = Snap._.getSomeDefs,\n\t            has = \"hasOwnProperty\",\n\t            wrap = Snap._.wrap;\n\t        /*\\\n\t         * Element.getBBox\n\t         [ method ]\n\t         **\n\t         * Returns the bounding box descriptor for the given element\n\t         **\n\t         = (object) bounding box descriptor:\n\t         o {\n\t         o     cx: (number) x of the center,\n\t         o     cy: (number) x of the center,\n\t         o     h: (number) height,\n\t         o     height: (number) height,\n\t         o     path: (string) path command for the box,\n\t         o     r0: (number) radius of a circle that fully encloses the box,\n\t         o     r1: (number) radius of the smallest circle that can be enclosed,\n\t         o     r2: (number) radius of the largest circle that can be enclosed,\n\t         o     vb: (string) box as a viewbox command,\n\t         o     w: (number) width,\n\t         o     width: (number) width,\n\t         o     x2: (number) x of the right side,\n\t         o     x: (number) x of the left side,\n\t         o     y2: (number) y of the bottom edge,\n\t         o     y: (number) y of the top edge\n\t         o }\n\t        \\*/\n\t        elproto.getBBox = function (isWithoutTransform) {\n\t            if (this.type == \"tspan\") {\n\t                return Snap._.box(this.node.getClientRects().item(0));\n\t            }\n\t            if (!Snap.Matrix || !Snap.path) {\n\t                return this.node.getBBox();\n\t            }\n\t            var el = this,\n\t                m = new Snap.Matrix();\n\t            if (el.removed) {\n\t                return Snap._.box();\n\t            }\n\t            while (el.type == \"use\") {\n\t                if (!isWithoutTransform) {\n\t                    m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t                }\n\t                if (el.original) {\n\t                    el = el.original;\n\t                } else {\n\t                    var href = el.attr(\"xlink:href\");\n\t                    el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t                }\n\t            }\n\t            var _ = el._,\n\t                pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t            try {\n\t                if (isWithoutTransform) {\n\t                    _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                    return Snap._.box(_.bboxwt);\n\t                } else {\n\t                    el.realPath = pathfinder(el);\n\t                    el.matrix = el.transform().localMatrix;\n\t                    _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                    return Snap._.box(_.bbox);\n\t                }\n\t            } catch (e) {\n\t                // Firefox doesn’t give you bbox of hidden element\n\t                return Snap._.box();\n\t            }\n\t        };\n\t        var propString = function propString() {\n\t            return this.string;\n\t        };\n\t        function extractTransform(el, tstr) {\n\t            if (tstr == null) {\n\t                var doReturn = true;\n\t                if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                    tstr = el.node.getAttribute(\"gradientTransform\");\n\t                } else if (el.type == \"pattern\") {\n\t                    tstr = el.node.getAttribute(\"patternTransform\");\n\t                } else {\n\t                    tstr = el.node.getAttribute(\"transform\");\n\t                }\n\t                if (!tstr) {\n\t                    return new Snap.Matrix();\n\t                }\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                if (!Snap._.rgTransform.test(tstr)) {\n\t                    tstr = Snap._.svgTransform2string(tstr);\n\t                } else {\n\t                    tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n\t                }\n\t                if (is(tstr, \"array\")) {\n\t                    tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t                }\n\t                el._.transform = tstr;\n\t            }\n\t            var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t            if (doReturn) {\n\t                return m;\n\t            } else {\n\t                el.matrix = m;\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.transform\n\t         [ method ]\n\t         **\n\t         * Gets or sets transformation of the element\n\t         **\n\t         - tstr (string) transform string in Snap or SVG format\n\t         = (Element) the current element\n\t         * or\n\t         = (object) transformation descriptor:\n\t         o {\n\t         o     string (string) transform string,\n\t         o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t         o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t         o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t         o     global (string) global transformation as string,\n\t         o     local (string) local transformation as string,\n\t         o     toString (function) returns `string` property\n\t         o }\n\t        \\*/\n\t        elproto.transform = function (tstr) {\n\t            var _ = this._;\n\t            if (tstr == null) {\n\t                var papa = this,\n\t                    global = new Snap.Matrix(this.node.getCTM()),\n\t                    local = extractTransform(this),\n\t                    ms = [local],\n\t                    m = new Snap.Matrix(),\n\t                    i,\n\t                    localString = local.toTransformString(),\n\t                    string = Str(local) == Str(this.matrix) ? Str(_.transform) : localString;\n\t                while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                    ms.push(extractTransform(papa));\n\t                }\n\t                i = ms.length;\n\t                while (i--) {\n\t                    m.add(ms[i]);\n\t                }\n\t                return {\n\t                    string: string,\n\t                    globalMatrix: global,\n\t                    totalMatrix: m,\n\t                    localMatrix: local,\n\t                    diffMatrix: global.clone().add(local.invert()),\n\t                    global: global.toTransformString(),\n\t                    total: m.toTransformString(),\n\t                    local: localString,\n\t                    toString: propString\n\t                };\n\t            }\n\t            if (tstr instanceof Snap.Matrix) {\n\t                this.matrix = tstr;\n\t                this._.transform = tstr.toTransformString();\n\t            } else {\n\t                extractTransform(this, tstr);\n\t            }\n\t\n\t            if (this.node) {\n\t                if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                    $(this.node, { gradientTransform: this.matrix });\n\t                } else if (this.type == \"pattern\") {\n\t                    $(this.node, { patternTransform: this.matrix });\n\t                } else {\n\t                    $(this.node, { transform: this.matrix });\n\t                }\n\t            }\n\t\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.parent\n\t         [ method ]\n\t         **\n\t         * Returns the element's parent\n\t         **\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.parent = function () {\n\t            return wrap(this.node.parentNode);\n\t        };\n\t        /*\\\n\t         * Element.append\n\t         [ method ]\n\t         **\n\t         * Appends the given element to current one\n\t         **\n\t         - el (Element|Set) element to append\n\t         = (Element) the parent element\n\t        \\*/\n\t        /*\\\n\t         * Element.add\n\t         [ method ]\n\t         **\n\t         * See @Element.append\n\t        \\*/\n\t        elproto.append = elproto.add = function (el) {\n\t            if (el) {\n\t                if (el.type == \"set\") {\n\t                    var it = this;\n\t                    el.forEach(function (el) {\n\t                        it.add(el);\n\t                    });\n\t                    return this;\n\t                }\n\t                el = wrap(el);\n\t                this.node.appendChild(el.node);\n\t                el.paper = this.paper;\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.appendTo\n\t         [ method ]\n\t         **\n\t         * Appends the current element to the given one\n\t         **\n\t         - el (Element) parent element to append to\n\t         = (Element) the child element\n\t        \\*/\n\t        elproto.appendTo = function (el) {\n\t            if (el) {\n\t                el = wrap(el);\n\t                el.append(this);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.prepend\n\t         [ method ]\n\t         **\n\t         * Prepends the given element to the current one\n\t         **\n\t         - el (Element) element to prepend\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.prepend = function (el) {\n\t            if (el) {\n\t                if (el.type == \"set\") {\n\t                    var it = this,\n\t                        first;\n\t                    el.forEach(function (el) {\n\t                        if (first) {\n\t                            first.after(el);\n\t                        } else {\n\t                            it.prepend(el);\n\t                        }\n\t                        first = el;\n\t                    });\n\t                    return this;\n\t                }\n\t                el = wrap(el);\n\t                var parent = el.parent();\n\t                this.node.insertBefore(el.node, this.node.firstChild);\n\t                this.add && this.add();\n\t                el.paper = this.paper;\n\t                this.parent() && this.parent().add();\n\t                parent && parent.add();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.prependTo\n\t         [ method ]\n\t         **\n\t         * Prepends the current element to the given one\n\t         **\n\t         - el (Element) parent element to prepend to\n\t         = (Element) the child element\n\t        \\*/\n\t        elproto.prependTo = function (el) {\n\t            el = wrap(el);\n\t            el.prepend(this);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.before\n\t         [ method ]\n\t         **\n\t         * Inserts given element before the current one\n\t         **\n\t         - el (Element) element to insert\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.before = function (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    var parent = el.parent();\n\t                    it.node.parentNode.insertBefore(el.node, it.node);\n\t                    parent && parent.add();\n\t                });\n\t                this.parent().add();\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.parentNode.insertBefore(el.node, this.node);\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t            el.paper = this.paper;\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.after\n\t         [ method ]\n\t         **\n\t         * Inserts given element after the current one\n\t         **\n\t         - el (Element) element to insert\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.after = function (el) {\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            if (this.node.nextSibling) {\n\t                this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t            } else {\n\t                this.node.parentNode.appendChild(el.node);\n\t            }\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t            el.paper = this.paper;\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.insertBefore\n\t         [ method ]\n\t         **\n\t         * Inserts the element after the given one\n\t         **\n\t         - el (Element) element next to whom insert to\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.insertBefore = function (el) {\n\t            el = wrap(el);\n\t            var parent = this.parent();\n\t            el.node.parentNode.insertBefore(this.node, el.node);\n\t            this.paper = el.paper;\n\t            parent && parent.add();\n\t            el.parent() && el.parent().add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.insertAfter\n\t         [ method ]\n\t         **\n\t         * Inserts the element after the given one\n\t         **\n\t         - el (Element) element next to whom insert to\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.insertAfter = function (el) {\n\t            el = wrap(el);\n\t            var parent = this.parent();\n\t            el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t            this.paper = el.paper;\n\t            parent && parent.add();\n\t            el.parent() && el.parent().add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.remove\n\t         [ method ]\n\t         **\n\t         * Removes element from the DOM\n\t         = (Element) the detached element\n\t        \\*/\n\t        elproto.remove = function () {\n\t            var parent = this.parent();\n\t            this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t            delete this.paper;\n\t            this.removed = true;\n\t            parent && parent.add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.select\n\t         [ method ]\n\t         **\n\t         * Gathers the nested @Element matching the given set of CSS selectors\n\t         **\n\t         - query (string) CSS selector\n\t         = (Element) result of query selection\n\t        \\*/\n\t        elproto.select = function (query) {\n\t            return wrap(this.node.querySelector(query));\n\t        };\n\t        /*\\\n\t         * Element.selectAll\n\t         [ method ]\n\t         **\n\t         * Gathers nested @Element objects matching the given set of CSS selectors\n\t         **\n\t         - query (string) CSS selector\n\t         = (Set|array) result of query selection\n\t        \\*/\n\t        elproto.selectAll = function (query) {\n\t            var nodelist = this.node.querySelectorAll(query),\n\t                set = (Snap.set || Array)();\n\t            for (var i = 0; i < nodelist.length; i++) {\n\t                set.push(wrap(nodelist[i]));\n\t            }\n\t            return set;\n\t        };\n\t        /*\\\n\t         * Element.asPX\n\t         [ method ]\n\t         **\n\t         * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t         **\n\t         - attr (string) attribute name\n\t         - value (string) #optional attribute value\n\t         = (Element) result of query selection\n\t        \\*/\n\t        elproto.asPX = function (attr, value) {\n\t            if (value == null) {\n\t                value = this.attr(attr);\n\t            }\n\t            return +unit2px(this, attr, value);\n\t        };\n\t        // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t        /*\\\n\t         * Element.use\n\t         [ method ]\n\t         **\n\t         * Creates a `<use>` element linked to the current element\n\t         **\n\t         = (Element) the `<use>` element\n\t        \\*/\n\t        elproto.use = function () {\n\t            var use,\n\t                id = this.node.id;\n\t            if (!id) {\n\t                id = this.id;\n\t                $(this.node, {\n\t                    id: id\n\t                });\n\t            }\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\" || this.type == \"pattern\") {\n\t                use = make(this.type, this.node.parentNode);\n\t            } else {\n\t                use = make(\"use\", this.node.parentNode);\n\t            }\n\t            $(use.node, {\n\t                \"xlink:href\": \"#\" + id\n\t            });\n\t            use.original = this;\n\t            return use;\n\t        };\n\t        function fixids(el) {\n\t            var els = el.selectAll(\"*\"),\n\t                it,\n\t                url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t                ids = [],\n\t                uses = {};\n\t            function urltest(it, name) {\n\t                var val = $(it.node, name);\n\t                val = val && val.match(url);\n\t                val = val && val[2];\n\t                if (val && val.charAt() == \"#\") {\n\t                    val = val.substring(1);\n\t                } else {\n\t                    return;\n\t                }\n\t                if (val) {\n\t                    uses[val] = (uses[val] || []).concat(function (id) {\n\t                        var attr = {};\n\t                        attr[name] = Snap.url(id);\n\t                        $(it.node, attr);\n\t                    });\n\t                }\n\t            }\n\t            function linktest(it) {\n\t                var val = $(it.node, \"xlink:href\");\n\t                if (val && val.charAt() == \"#\") {\n\t                    val = val.substring(1);\n\t                } else {\n\t                    return;\n\t                }\n\t                if (val) {\n\t                    uses[val] = (uses[val] || []).concat(function (id) {\n\t                        it.attr(\"xlink:href\", \"#\" + id);\n\t                    });\n\t                }\n\t            }\n\t            for (var i = 0, ii = els.length; i < ii; i++) {\n\t                it = els[i];\n\t                urltest(it, \"fill\");\n\t                urltest(it, \"stroke\");\n\t                urltest(it, \"filter\");\n\t                urltest(it, \"mask\");\n\t                urltest(it, \"clip-path\");\n\t                linktest(it);\n\t                var oldid = $(it.node, \"id\");\n\t                if (oldid) {\n\t                    $(it.node, { id: it.id });\n\t                    ids.push({\n\t                        old: oldid,\n\t                        id: it.id\n\t                    });\n\t                }\n\t            }\n\t            for (i = 0, ii = ids.length; i < ii; i++) {\n\t                var fs = uses[ids[i].old];\n\t                if (fs) {\n\t                    for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                        fs[j](ids[i].id);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.clone\n\t         [ method ]\n\t         **\n\t         * Creates a clone of the element and inserts it after the element\n\t         **\n\t         = (Element) the clone\n\t        \\*/\n\t        elproto.clone = function () {\n\t            var clone = wrap(this.node.cloneNode(true));\n\t            if ($(clone.node, \"id\")) {\n\t                $(clone.node, { id: clone.id });\n\t            }\n\t            fixids(clone);\n\t            clone.insertAfter(this);\n\t            return clone;\n\t        };\n\t        /*\\\n\t         * Element.toDefs\n\t         [ method ]\n\t         **\n\t         * Moves element to the shared `<defs>` area\n\t         **\n\t         = (Element) the element\n\t        \\*/\n\t        elproto.toDefs = function () {\n\t            var defs = getSomeDefs(this);\n\t            defs.appendChild(this.node);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.toPattern\n\t         [ method ]\n\t         **\n\t         * Creates a `<pattern>` element from the current element\n\t         **\n\t         * To create a pattern you have to specify the pattern rect:\n\t         - x (string|number)\n\t         - y (string|number)\n\t         - width (string|number)\n\t         - height (string|number)\n\t         = (Element) the `<pattern>` element\n\t         * You can use pattern later on as an argument for `fill` attribute:\n\t         | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t         |         fill: \"none\",\n\t         |         stroke: \"#bada55\",\n\t         |         strokeWidth: 5\n\t         |     }).pattern(0, 0, 10, 10),\n\t         |     c = paper.circle(200, 200, 100);\n\t         | c.attr({\n\t         |     fill: p\n\t         | });\n\t        \\*/\n\t        elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t            var p = make(\"pattern\", getSomeDefs(this));\n\t            if (x == null) {\n\t                x = this.getBBox();\n\t            }\n\t            if (is(x, \"object\") && \"x\" in x) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                x = x.x;\n\t            }\n\t            $(p.node, {\n\t                x: x,\n\t                y: y,\n\t                width: width,\n\t                height: height,\n\t                patternUnits: \"userSpaceOnUse\",\n\t                id: p.id,\n\t                viewBox: [x, y, width, height].join(\" \")\n\t            });\n\t            p.node.appendChild(this.node);\n\t            return p;\n\t        };\n\t        // SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t        // SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t        /*\\\n\t         * Element.marker\n\t         [ method ]\n\t         **\n\t         * Creates a `<marker>` element from the current element\n\t         **\n\t         * To create a marker you have to specify the bounding rect and reference point:\n\t         - x (number)\n\t         - y (number)\n\t         - width (number)\n\t         - height (number)\n\t         - refX (number)\n\t         - refY (number)\n\t         = (Element) the `<marker>` element\n\t         * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t        \\*/\n\t        // TODO add usage for markers\n\t        elproto.marker = function (x, y, width, height, refX, refY) {\n\t            var p = make(\"marker\", getSomeDefs(this));\n\t            if (x == null) {\n\t                x = this.getBBox();\n\t            }\n\t            if (is(x, \"object\") && \"x\" in x) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                refX = x.refX || x.cx;\n\t                refY = x.refY || x.cy;\n\t                x = x.x;\n\t            }\n\t            $(p.node, {\n\t                viewBox: [x, y, width, height].join(\" \"),\n\t                markerWidth: width,\n\t                markerHeight: height,\n\t                orient: \"auto\",\n\t                refX: refX || 0,\n\t                refY: refY || 0,\n\t                id: p.id\n\t            });\n\t            p.node.appendChild(this.node);\n\t            return p;\n\t        };\n\t        var eldata = {};\n\t        /*\\\n\t         * Element.data\n\t         [ method ]\n\t         **\n\t         * Adds or retrieves given value associated with given key. (Don’t confuse\n\t         * with `data-` attributes)\n\t         *\n\t         * See also @Element.removeData\n\t         - key (string) key to store data\n\t         - value (any) #optional value to store\n\t         = (object) @Element\n\t         * or, if value is not specified:\n\t         = (any) value\n\t         > Usage\n\t         | for (var i = 0, i < 5, i++) {\n\t         |     paper.circle(10 + 15 * i, 10, 10)\n\t         |          .attr({fill: \"#000\"})\n\t         |          .data(\"i\", i)\n\t         |          .click(function () {\n\t         |             alert(this.data(\"i\"));\n\t         |          });\n\t         | }\n\t        \\*/\n\t        elproto.data = function (key, value) {\n\t            var data = eldata[this.id] = eldata[this.id] || {};\n\t            if (arguments.length == 0) {\n\t                eve(\"snap.data.get.\" + this.id, this, data, null);\n\t                return data;\n\t            }\n\t            if (arguments.length == 1) {\n\t                if (Snap.is(key, \"object\")) {\n\t                    for (var i in key) {\n\t                        if (key[has](i)) {\n\t                            this.data(i, key[i]);\n\t                        }\n\t                    }return this;\n\t                }\n\t                eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t                return data[key];\n\t            }\n\t            data[key] = value;\n\t            eve(\"snap.data.set.\" + this.id, this, value, key);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.removeData\n\t         [ method ]\n\t         **\n\t         * Removes value associated with an element by given key.\n\t         * If key is not provided, removes all the data of the element.\n\t         - key (string) #optional key\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.removeData = function (key) {\n\t            if (key == null) {\n\t                eldata[this.id] = {};\n\t            } else {\n\t                eldata[this.id] && delete eldata[this.id][key];\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.outerSVG\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t         *\n\t         * See also @Element.innerSVG\n\t         = (string) SVG code for the element\n\t        \\*/\n\t        /*\\\n\t         * Element.toString\n\t         [ method ]\n\t         **\n\t         * See @Element.outerSVG\n\t        \\*/\n\t        elproto.outerSVG = elproto.toString = toString(1);\n\t        /*\\\n\t         * Element.innerSVG\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t         = (string) SVG code for the element\n\t        \\*/\n\t        elproto.innerSVG = toString();\n\t        function toString(type) {\n\t            return function () {\n\t                var res = type ? \"<\" + this.type : \"\",\n\t                    attr = this.node.attributes,\n\t                    chld = this.node.childNodes;\n\t                if (type) {\n\t                    for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                        res += \" \" + attr[i].name + '=\"' + attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                    }\n\t                }\n\t                if (chld.length) {\n\t                    type && (res += \">\");\n\t                    for (i = 0, ii = chld.length; i < ii; i++) {\n\t                        if (chld[i].nodeType == 3) {\n\t                            res += chld[i].nodeValue;\n\t                        } else if (chld[i].nodeType == 1) {\n\t                            res += wrap(chld[i]).toString();\n\t                        }\n\t                    }\n\t                    type && (res += \"</\" + this.type + \">\");\n\t                } else {\n\t                    type && (res += \"/>\");\n\t                }\n\t                return res;\n\t            };\n\t        }\n\t        elproto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                var bb = this.getBBox(),\n\t                    svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                    x: +bb.x.toFixed(3),\n\t                    y: +bb.y.toFixed(3),\n\t                    width: +bb.width.toFixed(3),\n\t                    height: +bb.height.toFixed(3),\n\t                    contents: this.outerSVG()\n\t                });\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Fragment.select\n\t         [ method ]\n\t         **\n\t         * See @Element.select\n\t        \\*/\n\t        Fragment.prototype.select = elproto.select;\n\t        /*\\\n\t         * Fragment.selectAll\n\t         [ method ]\n\t         **\n\t         * See @Element.selectAll\n\t        \\*/\n\t        Fragment.prototype.selectAll = elproto.selectAll;\n\t    });\n\t\n\t    // Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            Str = String,\n\t            has = \"hasOwnProperty\";\n\t        function slice(from, to, f) {\n\t            return function (arr) {\n\t                var res = arr.slice(from, to);\n\t                if (res.length == 1) {\n\t                    res = res[0];\n\t                }\n\t                return f ? f(res) : res;\n\t            };\n\t        }\n\t        var Animation = function Animation(attr, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            this.attr = attr;\n\t            this.dur = ms;\n\t            easing && (this.easing = easing);\n\t            callback && (this.callback = callback);\n\t        };\n\t        Snap._.Animation = Animation;\n\t        /*\\\n\t         * Snap.animation\n\t         [ method ]\n\t         **\n\t         * Creates an animation object\n\t         **\n\t         - attr (object) attributes of final destination\n\t         - duration (number) duration of the animation, in milliseconds\n\t         - easing (function) #optional one of easing functions of @mina or custom one\n\t         - callback (function) #optional callback function that fires when animation ends\n\t         = (object) animation object\n\t        \\*/\n\t        Snap.animation = function (attr, ms, easing, callback) {\n\t            return new Animation(attr, ms, easing, callback);\n\t        };\n\t        /*\\\n\t         * Element.inAnim\n\t         [ method ]\n\t         **\n\t         * Returns a set of animations that may be able to manipulate the current element\n\t         **\n\t         = (object) in format:\n\t         o {\n\t         o     anim (object) animation object,\n\t         o     mina (object) @mina object,\n\t         o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t         o     status (function) gets or sets the status of the animation,\n\t         o     stop (function) stops the animation\n\t         o }\n\t        \\*/\n\t        elproto.inAnim = function () {\n\t            var el = this,\n\t                res = [];\n\t            for (var id in el.anims) {\n\t                if (el.anims[has](id)) {\n\t                    (function (a) {\n\t                        res.push({\n\t                            anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                            mina: a,\n\t                            curStatus: a.status(),\n\t                            status: function status(val) {\n\t                                return a.status(val);\n\t                            },\n\t                            stop: function stop() {\n\t                                a.stop();\n\t                            }\n\t                        });\n\t                    })(el.anims[id]);\n\t                }\n\t            }return res;\n\t        };\n\t        /*\\\n\t         * Snap.animate\n\t         [ method ]\n\t         **\n\t         * Runs generic animation of one number into another with a caring function\n\t         **\n\t         - from (number|array) number or array of numbers\n\t         - to (number|array) number or array of numbers\n\t         - setter (function) caring function that accepts one number argument\n\t         - duration (number) duration, in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function to execute when animation ends\n\t         = (object) animation object in @mina format\n\t         o {\n\t         o     id (string) animation id, consider it read-only,\n\t         o     duration (function) gets or sets the duration of the animation,\n\t         o     easing (function) easing,\n\t         o     speed (function) gets or sets the speed of the animation,\n\t         o     status (function) gets or sets the status of the animation,\n\t         o     stop (function) stops the animation\n\t         o }\n\t         | var rect = Snap().rect(0, 0, 10, 10);\n\t         | Snap.animate(0, 10, function (val) {\n\t         |     rect.attr({\n\t         |         x: val\n\t         |     });\n\t         | }, 1000);\n\t         | // in given context is equivalent to\n\t         | rect.animate({x: 10}, 1000);\n\t        \\*/\n\t        Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            var now = mina.time(),\n\t                anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t            callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t            return anim;\n\t        };\n\t        /*\\\n\t         * Element.stop\n\t         [ method ]\n\t         **\n\t         * Stops all the animations for the current element\n\t         **\n\t         = (Element) the current element\n\t        \\*/\n\t        elproto.stop = function () {\n\t            var anims = this.inAnim();\n\t            for (var i = 0, ii = anims.length; i < ii; i++) {\n\t                anims[i].stop();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.animate\n\t         [ method ]\n\t         **\n\t         * Animates the given attributes of the element\n\t         **\n\t         - attrs (object) key-value pairs of destination attributes\n\t         - duration (number) duration of the animation in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function that executes when the animation ends\n\t         = (Element) the current element\n\t        \\*/\n\t        elproto.animate = function (attrs, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            if (attrs instanceof Animation) {\n\t                callback = attrs.callback;\n\t                easing = attrs.easing;\n\t                ms = attrs.dur;\n\t                attrs = attrs.attr;\n\t            }\n\t            var fkeys = [],\n\t                tkeys = [],\n\t                keys = {},\n\t                from,\n\t                to,\n\t                f,\n\t                eq,\n\t                el = this;\n\t            for (var key in attrs) {\n\t                if (attrs[has](key)) {\n\t                    if (el.equal) {\n\t                        eq = el.equal(key, Str(attrs[key]));\n\t                        from = eq.from;\n\t                        to = eq.to;\n\t                        f = eq.f;\n\t                    } else {\n\t                        from = +el.attr(key);\n\t                        to = +attrs[key];\n\t                    }\n\t                    var len = is(from, \"array\") ? from.length : 1;\n\t                    keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t                    fkeys = fkeys.concat(from);\n\t                    tkeys = tkeys.concat(to);\n\t                }\n\t            }var now = mina.time(),\n\t                anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) {\n\t                    if (keys[has](key)) {\n\t                        attr[key] = keys[key](val);\n\t                    }\n\t                }el.attr(attr);\n\t            }, easing);\n\t            el.anims[anim.id] = anim;\n\t            anim._attrs = attrs;\n\t            anim._callback = callback;\n\t            eve(\"snap.animcreated.\" + el.id, anim);\n\t            eve.once(\"mina.finish.\" + anim.id, function () {\n\t                eve.off(\"mina.*.\" + anim.id);\n\t                delete el.anims[anim.id];\n\t                callback && callback.call(el);\n\t            });\n\t            eve.once(\"mina.stop.\" + anim.id, function () {\n\t                eve.off(\"mina.*.\" + anim.id);\n\t                delete el.anims[anim.id];\n\t            });\n\t            return el;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var objectToString = Object.prototype.toString,\n\t            Str = String,\n\t            math = Math,\n\t            E = \"\";\n\t        function Matrix(a, b, c, d, e, f) {\n\t            if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t                this.a = a.a;\n\t                this.b = a.b;\n\t                this.c = a.c;\n\t                this.d = a.d;\n\t                this.e = a.e;\n\t                this.f = a.f;\n\t                return;\n\t            }\n\t            if (a != null) {\n\t                this.a = +a;\n\t                this.b = +b;\n\t                this.c = +c;\n\t                this.d = +d;\n\t                this.e = +e;\n\t                this.f = +f;\n\t            } else {\n\t                this.a = 1;\n\t                this.b = 0;\n\t                this.c = 0;\n\t                this.d = 1;\n\t                this.e = 0;\n\t                this.f = 0;\n\t            }\n\t        }\n\t        (function (matrixproto) {\n\t            /*\\\n\t             * Matrix.add\n\t             [ method ]\n\t             **\n\t             * Adds the given matrix to existing one\n\t             - a (number)\n\t             - b (number)\n\t             - c (number)\n\t             - d (number)\n\t             - e (number)\n\t             - f (number)\n\t             * or\n\t             - matrix (object) @Matrix\n\t            \\*/\n\t            matrixproto.add = function (a, b, c, d, e, f) {\n\t                if (a && a instanceof Matrix) {\n\t                    return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n\t                }\n\t                var aNew = a * this.a + b * this.c,\n\t                    bNew = a * this.b + b * this.d;\n\t                this.e += e * this.a + f * this.c;\n\t                this.f += e * this.b + f * this.d;\n\t                this.c = c * this.a + d * this.c;\n\t                this.d = c * this.b + d * this.d;\n\t\n\t                this.a = aNew;\n\t                this.b = bNew;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.multLeft\n\t             [ method ]\n\t             **\n\t             * Multiplies a passed affine transform to the left: M * this.\n\t             - a (number)\n\t             - b (number)\n\t             - c (number)\n\t             - d (number)\n\t             - e (number)\n\t             - f (number)\n\t             * or\n\t             - matrix (object) @Matrix\n\t            \\*/\n\t            Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n\t                if (a && a instanceof Matrix) {\n\t                    return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n\t                }\n\t                var aNew = a * this.a + c * this.b,\n\t                    cNew = a * this.c + c * this.d,\n\t                    eNew = a * this.e + c * this.f + e;\n\t                this.b = b * this.a + d * this.b;\n\t                this.d = b * this.c + d * this.d;\n\t                this.f = b * this.e + d * this.f + f;\n\t\n\t                this.a = aNew;\n\t                this.c = cNew;\n\t                this.e = eNew;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.invert\n\t             [ method ]\n\t             **\n\t             * Returns an inverted version of the matrix\n\t             = (object) @Matrix\n\t            \\*/\n\t            matrixproto.invert = function () {\n\t                var me = this,\n\t                    x = me.a * me.d - me.b * me.c;\n\t                return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t            };\n\t            /*\\\n\t             * Matrix.clone\n\t             [ method ]\n\t             **\n\t             * Returns a copy of the matrix\n\t             = (object) @Matrix\n\t            \\*/\n\t            matrixproto.clone = function () {\n\t                return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t            };\n\t            /*\\\n\t             * Matrix.translate\n\t             [ method ]\n\t             **\n\t             * Translate the matrix\n\t             - x (number) horizontal offset distance\n\t             - y (number) vertical offset distance\n\t            \\*/\n\t            matrixproto.translate = function (x, y) {\n\t                this.e += x * this.a + y * this.c;\n\t                this.f += x * this.b + y * this.d;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.scale\n\t             [ method ]\n\t             **\n\t             * Scales the matrix\n\t             - x (number) amount to be scaled, with `1` resulting in no change\n\t             - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t             - cx (number) #optional horizontal origin point from which to scale\n\t             - cy (number) #optional vertical origin point from which to scale\n\t             * Default cx, cy is the middle point of the element.\n\t            \\*/\n\t            matrixproto.scale = function (x, y, cx, cy) {\n\t                y == null && (y = x);\n\t                (cx || cy) && this.translate(cx, cy);\n\t                this.a *= x;\n\t                this.b *= x;\n\t                this.c *= y;\n\t                this.d *= y;\n\t                (cx || cy) && this.translate(-cx, -cy);\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.rotate\n\t             [ method ]\n\t             **\n\t             * Rotates the matrix\n\t             - a (number) angle of rotation, in degrees\n\t             - x (number) horizontal origin point from which to rotate\n\t             - y (number) vertical origin point from which to rotate\n\t            \\*/\n\t            matrixproto.rotate = function (a, x, y) {\n\t                a = Snap.rad(a);\n\t                x = x || 0;\n\t                y = y || 0;\n\t                var cos = +math.cos(a).toFixed(9),\n\t                    sin = +math.sin(a).toFixed(9);\n\t                this.add(cos, sin, -sin, cos, x, y);\n\t                return this.add(1, 0, 0, 1, -x, -y);\n\t            };\n\t            /*\\\n\t             * Matrix.skewX\n\t             [ method ]\n\t             **\n\t             * Skews the matrix along the x-axis\n\t             - x (number) Angle to skew along the x-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skewX = function (x) {\n\t                return this.skew(x, 0);\n\t            };\n\t            /*\\\n\t             * Matrix.skewY\n\t             [ method ]\n\t             **\n\t             * Skews the matrix along the y-axis\n\t             - y (number) Angle to skew along the y-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skewY = function (y) {\n\t                return this.skew(0, y);\n\t            };\n\t            /*\\\n\t             * Matrix.skew\n\t             [ method ]\n\t             **\n\t             * Skews the matrix\n\t             - y (number) Angle to skew along the y-axis (in degrees).\n\t             - x (number) Angle to skew along the x-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skew = function (x, y) {\n\t                x = x || 0;\n\t                y = y || 0;\n\t                x = Snap.rad(x);\n\t                y = Snap.rad(y);\n\t                var c = math.tan(x).toFixed(9);\n\t                var b = math.tan(y).toFixed(9);\n\t                return this.add(1, b, c, 1, 0, 0);\n\t            };\n\t            /*\\\n\t             * Matrix.x\n\t             [ method ]\n\t             **\n\t             * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t             - x (number)\n\t             - y (number)\n\t             = (number) x\n\t            \\*/\n\t            matrixproto.x = function (x, y) {\n\t                return x * this.a + y * this.c + this.e;\n\t            };\n\t            /*\\\n\t             * Matrix.y\n\t             [ method ]\n\t             **\n\t             * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t             - x (number)\n\t             - y (number)\n\t             = (number) y\n\t            \\*/\n\t            matrixproto.y = function (x, y) {\n\t                return x * this.b + y * this.d + this.f;\n\t            };\n\t            matrixproto.get = function (i) {\n\t                return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t            };\n\t            matrixproto.toString = function () {\n\t                return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t            };\n\t            matrixproto.offset = function () {\n\t                return [this.e.toFixed(4), this.f.toFixed(4)];\n\t            };\n\t            function norm(a) {\n\t                return a[0] * a[0] + a[1] * a[1];\n\t            }\n\t            function normalize(a) {\n\t                var mag = math.sqrt(norm(a));\n\t                a[0] && (a[0] /= mag);\n\t                a[1] && (a[1] /= mag);\n\t            }\n\t            /*\\\n\t             * Matrix.determinant\n\t             [ method ]\n\t             **\n\t             * Finds determinant of the given matrix.\n\t             = (number) determinant\n\t            \\*/\n\t            matrixproto.determinant = function () {\n\t                return this.a * this.d - this.b * this.c;\n\t            };\n\t            /*\\\n\t             * Matrix.split\n\t             [ method ]\n\t             **\n\t             * Splits matrix into primitive transformations\n\t             = (object) in format:\n\t             o dx (number) translation by x\n\t             o dy (number) translation by y\n\t             o scalex (number) scale by x\n\t             o scaley (number) scale by y\n\t             o shear (number) shear\n\t             o rotate (number) rotation in deg\n\t             o isSimple (boolean) could it be represented via simple transformations\n\t            \\*/\n\t            matrixproto.split = function () {\n\t                var out = {};\n\t                // translation\n\t                out.dx = this.e;\n\t                out.dy = this.f;\n\t\n\t                // scale and shear\n\t                var row = [[this.a, this.b], [this.c, this.d]];\n\t                out.scalex = math.sqrt(norm(row[0]));\n\t                normalize(row[0]);\n\t\n\t                out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t                row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t                out.scaley = math.sqrt(norm(row[1]));\n\t                normalize(row[1]);\n\t                out.shear /= out.scaley;\n\t\n\t                if (this.determinant() < 0) {\n\t                    out.scalex = -out.scalex;\n\t                }\n\t\n\t                // rotation\n\t                var sin = row[0][1],\n\t                    cos = row[1][1];\n\t                if (cos < 0) {\n\t                    out.rotate = Snap.deg(math.acos(cos));\n\t                    if (sin < 0) {\n\t                        out.rotate = 360 - out.rotate;\n\t                    }\n\t                } else {\n\t                    out.rotate = Snap.deg(math.asin(sin));\n\t                }\n\t\n\t                out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t                out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t                out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t                return out;\n\t            };\n\t            /*\\\n\t             * Matrix.toTransformString\n\t             [ method ]\n\t             **\n\t             * Returns transform string that represents given matrix\n\t             = (string) transform string\n\t            \\*/\n\t            matrixproto.toTransformString = function (shorter) {\n\t                var s = shorter || this.split();\n\t                if (!+s.shear.toFixed(9)) {\n\t                    s.scalex = +s.scalex.toFixed(4);\n\t                    s.scaley = +s.scaley.toFixed(4);\n\t                    s.rotate = +s.rotate.toFixed(4);\n\t                    return (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) + (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n\t                } else {\n\t                    return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t                }\n\t            };\n\t        })(Matrix.prototype);\n\t        /*\\\n\t         * Snap.Matrix\n\t         [ method ]\n\t         **\n\t         * Matrix constructor, extend on your own risk.\n\t         * To create matrices use @Snap.matrix.\n\t        \\*/\n\t        Snap.Matrix = Matrix;\n\t        /*\\\n\t         * Snap.matrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns a matrix based on the given parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - svgMatrix (SVGMatrix)\n\t         = (object) @Matrix\n\t        \\*/\n\t        Snap.matrix = function (a, b, c, d, e, f) {\n\t            return new Matrix(a, b, c, d, e, f);\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var has = \"hasOwnProperty\",\n\t            make = Snap._.make,\n\t            wrap = Snap._.wrap,\n\t            is = Snap.is,\n\t            getSomeDefs = Snap._.getSomeDefs,\n\t            reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n\t            $ = Snap._.$,\n\t            URL = Snap.url,\n\t            Str = String,\n\t            separator = Snap._.separator,\n\t            E = \"\";\n\t        /*\\\n\t         * Snap.deurl\n\t         [ method ]\n\t         **\n\t         * Unwraps path from `\"url(<path>)\"`.\n\t         - value (string) url path\n\t         = (string) unwrapped path\n\t        \\*/\n\t        Snap.deurl = function (value) {\n\t            var res = String(value).match(reURLValue);\n\t            return res ? res[2] : value;\n\t        };\n\t        // Attributes event handlers\n\t        eve.on(\"snap.util.attr.mask\", function (value) {\n\t            if (value instanceof Element || value instanceof Fragment) {\n\t                eve.stop();\n\t                if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                    value = value.node.firstChild;\n\t                    getSomeDefs(this).appendChild(value);\n\t                    value = wrap(value);\n\t                }\n\t                if (value.type == \"mask\") {\n\t                    var mask = value;\n\t                } else {\n\t                    mask = make(\"mask\", getSomeDefs(this));\n\t                    mask.node.appendChild(value.node);\n\t                }\n\t                !mask.node.id && $(mask.node, {\n\t                    id: mask.id\n\t                });\n\t                $(this.node, {\n\t                    mask: URL(mask.id)\n\t                });\n\t            }\n\t        });\n\t        (function (clipIt) {\n\t            eve.on(\"snap.util.attr.clip\", clipIt);\n\t            eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t            eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t        })(function (value) {\n\t            if (value instanceof Element || value instanceof Fragment) {\n\t                eve.stop();\n\t                var clip,\n\t                    node = value.node;\n\t                while (node) {\n\t                    if (node.nodeName === \"clipPath\") {\n\t                        clip = new Element(node);\n\t                        break;\n\t                    }\n\t                    if (node.nodeName === \"svg\") {\n\t                        clip = undefined;\n\t                        break;\n\t                    }\n\t                    node = node.parentNode;\n\t                }\n\t                if (!clip) {\n\t                    clip = make(\"clipPath\", getSomeDefs(this));\n\t                    clip.node.appendChild(value.node);\n\t                    !clip.node.id && $(clip.node, {\n\t                        id: clip.id\n\t                    });\n\t                }\n\t                $(this.node, {\n\t                    \"clip-path\": URL(clip.node.id || clip.id)\n\t                });\n\t            }\n\t        });\n\t        function fillStroke(name) {\n\t            return function (value) {\n\t                eve.stop();\n\t                if (value instanceof Fragment && value.node.childNodes.length == 1 && (value.node.firstChild.tagName == \"radialGradient\" || value.node.firstChild.tagName == \"linearGradient\" || value.node.firstChild.tagName == \"pattern\")) {\n\t                    value = value.node.firstChild;\n\t                    getSomeDefs(this).appendChild(value);\n\t                    value = wrap(value);\n\t                }\n\t                if (value instanceof Element) {\n\t                    if (value.type == \"radialGradient\" || value.type == \"linearGradient\" || value.type == \"pattern\") {\n\t                        if (!value.node.id) {\n\t                            $(value.node, {\n\t                                id: value.id\n\t                            });\n\t                        }\n\t                        var fill = URL(value.node.id);\n\t                    } else {\n\t                        fill = value.attr(name);\n\t                    }\n\t                } else {\n\t                    fill = Snap.color(value);\n\t                    if (fill.error) {\n\t                        var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                        if (grad) {\n\t                            if (!grad.node.id) {\n\t                                $(grad.node, {\n\t                                    id: grad.id\n\t                                });\n\t                            }\n\t                            fill = URL(grad.node.id);\n\t                        } else {\n\t                            fill = value;\n\t                        }\n\t                    } else {\n\t                        fill = Str(fill);\n\t                    }\n\t                }\n\t                var attrs = {};\n\t                attrs[name] = fill;\n\t                $(this.node, attrs);\n\t                this.node.style[name] = E;\n\t            };\n\t        }\n\t        eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t        eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t        var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t        eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t            string = Str(string);\n\t            var tokens = string.match(gradrg);\n\t            if (!tokens) {\n\t                return null;\n\t            }\n\t            var type = tokens[1],\n\t                params = tokens[2],\n\t                stops = tokens[3];\n\t            params = params.split(/\\s*,\\s*/).map(function (el) {\n\t                return +el == el ? +el : el;\n\t            });\n\t            if (params.length == 1 && params[0] == 0) {\n\t                params = [];\n\t            }\n\t            stops = stops.split(\"-\");\n\t            stops = stops.map(function (el) {\n\t                el = el.split(\":\");\n\t                var out = {\n\t                    color: el[0]\n\t                };\n\t                if (el[1]) {\n\t                    out.offset = parseFloat(el[1]);\n\t                }\n\t                return out;\n\t            });\n\t            var len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) {\n\t                if (\"offset\" in stops[i]) {\n\t                    seed(i, stops[i].offset);\n\t                }\n\t            }stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            return {\n\t                type: type,\n\t                params: params,\n\t                stops: stops\n\t            };\n\t        });\n\t\n\t        eve.on(\"snap.util.attr.d\", function (value) {\n\t            eve.stop();\n\t            if (is(value, \"array\") && is(value[0], \"array\")) {\n\t                value = Snap.path.toString.call(value);\n\t            }\n\t            value = Str(value);\n\t            if (value.match(/[ruo]/i)) {\n\t                value = Snap.path.toAbsolute(value);\n\t            }\n\t            $(this.node, { d: value });\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.#text\", function (value) {\n\t            eve.stop();\n\t            value = Str(value);\n\t            var txt = glob.doc.createTextNode(value);\n\t            while (this.node.firstChild) {\n\t                this.node.removeChild(this.node.firstChild);\n\t            }\n\t            this.node.appendChild(txt);\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.path\", function (value) {\n\t            eve.stop();\n\t            this.attr({ d: value });\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.class\", function (value) {\n\t            eve.stop();\n\t            this.node.className.baseVal = value;\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t            var vb;\n\t            if (is(value, \"object\") && \"x\" in value) {\n\t                vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t            } else if (is(value, \"array\")) {\n\t                vb = value.join(\" \");\n\t            } else {\n\t                vb = value;\n\t            }\n\t            $(this.node, {\n\t                viewBox: vb\n\t            });\n\t            eve.stop();\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.transform\", function (value) {\n\t            this.transform(value);\n\t            eve.stop();\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.r\", function (value) {\n\t            if (this.type == \"rect\") {\n\t                eve.stop();\n\t                $(this.node, {\n\t                    rx: value,\n\t                    ry: value\n\t                });\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.textpath\", function (value) {\n\t            eve.stop();\n\t            if (this.type == \"text\") {\n\t                var id, tp, node;\n\t                if (!value && this.textPath) {\n\t                    tp = this.textPath;\n\t                    while (tp.node.firstChild) {\n\t                        this.node.appendChild(tp.node.firstChild);\n\t                    }\n\t                    tp.remove();\n\t                    delete this.textPath;\n\t                    return;\n\t                }\n\t                if (is(value, \"string\")) {\n\t                    var defs = getSomeDefs(this),\n\t                        path = wrap(defs.parentNode).path(value);\n\t                    defs.appendChild(path.node);\n\t                    id = path.id;\n\t                    path.attr({ id: id });\n\t                } else {\n\t                    value = wrap(value);\n\t                    if (value instanceof Element) {\n\t                        id = value.attr(\"id\");\n\t                        if (!id) {\n\t                            id = value.id;\n\t                            value.attr({ id: id });\n\t                        }\n\t                    }\n\t                }\n\t                if (id) {\n\t                    tp = this.textPath;\n\t                    node = this.node;\n\t                    if (tp) {\n\t                        tp.attr({ \"xlink:href\": \"#\" + id });\n\t                    } else {\n\t                        tp = $(\"textPath\", {\n\t                            \"xlink:href\": \"#\" + id\n\t                        });\n\t                        while (node.firstChild) {\n\t                            tp.appendChild(node.firstChild);\n\t                        }\n\t                        node.appendChild(tp);\n\t                        this.textPath = wrap(tp);\n\t                    }\n\t                }\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.text\", function (value) {\n\t            if (this.type == \"text\") {\n\t                var i = 0,\n\t                    node = this.node,\n\t                    tuner = function tuner(chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t                while (node.firstChild) {\n\t                    node.removeChild(node.firstChild);\n\t                }\n\t                var tuned = tuner(value);\n\t                while (tuned.firstChild) {\n\t                    node.appendChild(tuned.firstChild);\n\t                }\n\t            }\n\t            eve.stop();\n\t        })(-1);\n\t        function setFontSize(value) {\n\t            eve.stop();\n\t            if (value == +value) {\n\t                value += \"px\";\n\t            }\n\t            this.node.style.fontSize = value;\n\t        }\n\t        eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t        eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t        eve.on(\"snap.util.getattr.transform\", function () {\n\t            eve.stop();\n\t            return this.transform();\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.textpath\", function () {\n\t            eve.stop();\n\t            return this.textPath;\n\t        })(-1);\n\t        // Markers\n\t        (function () {\n\t            function getter(end) {\n\t                return function () {\n\t                    eve.stop();\n\t                    var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                    if (style == \"none\") {\n\t                        return style;\n\t                    } else {\n\t                        return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                    }\n\t                };\n\t            }\n\t            function setter(end) {\n\t                return function (value) {\n\t                    eve.stop();\n\t                    var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                    if (value == \"\" || !value) {\n\t                        this.node.style[name] = \"none\";\n\t                        return;\n\t                    }\n\t                    if (value.type == \"marker\") {\n\t                        var id = value.node.id;\n\t                        if (!id) {\n\t                            $(value.node, { id: value.id });\n\t                        }\n\t                        this.node.style[name] = URL(id);\n\t                        return;\n\t                    }\n\t                };\n\t            }\n\t            eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t            eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t            eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t            eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t            eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t        })();\n\t        eve.on(\"snap.util.getattr.r\", function () {\n\t            if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t                eve.stop();\n\t                return $(this.node, \"rx\");\n\t            }\n\t        })(-1);\n\t        function textExtract(node) {\n\t            var out = [];\n\t            var children = node.childNodes;\n\t            for (var i = 0, ii = children.length; i < ii; i++) {\n\t                var chi = children[i];\n\t                if (chi.nodeType == 3) {\n\t                    out.push(chi.nodeValue);\n\t                }\n\t                if (chi.tagName == \"tspan\") {\n\t                    if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                        out.push(chi.firstChild.nodeValue);\n\t                    } else {\n\t                        out.push(textExtract(chi));\n\t                    }\n\t                }\n\t            }\n\t            return out;\n\t        }\n\t        eve.on(\"snap.util.getattr.text\", function () {\n\t            if (this.type == \"text\" || this.type == \"tspan\") {\n\t                eve.stop();\n\t                var out = textExtract(this.node);\n\t                return out.length == 1 ? out[0] : out;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.#text\", function () {\n\t            return this.node.textContent;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.fill\", function (internal) {\n\t            if (internal) {\n\t                return;\n\t            }\n\t            eve.stop();\n\t            var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n\t            return Snap(Snap.deurl(value)) || value;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.stroke\", function (internal) {\n\t            if (internal) {\n\t                return;\n\t            }\n\t            eve.stop();\n\t            var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n\t            return Snap(Snap.deurl(value)) || value;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.viewBox\", function () {\n\t            eve.stop();\n\t            var vb = $(this.node, \"viewBox\");\n\t            if (vb) {\n\t                vb = vb.split(separator);\n\t                return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t            } else {\n\t                return;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.points\", function () {\n\t            var p = $(this.node, \"points\");\n\t            eve.stop();\n\t            if (p) {\n\t                return p.split(separator);\n\t            } else {\n\t                return;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.path\", function () {\n\t            var p = $(this.node, \"d\");\n\t            eve.stop();\n\t            return p;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.class\", function () {\n\t            return this.node.className.baseVal;\n\t        })(-1);\n\t        function getFontSize() {\n\t            eve.stop();\n\t            return this.node.style.fontSize;\n\t        }\n\t        eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t        eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t    });\n\t\n\t    // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var rgNotSpace = /\\S+/g,\n\t            rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t            rgTrim = /(^\\s+|\\s+$)/g,\n\t            Str = String,\n\t            elproto = Element.prototype;\n\t        /*\\\n\t         * Element.addClass\n\t         [ method ]\n\t         **\n\t         * Adds given class name or list of class names to the element.\n\t         - value (string) class name or space separated list of class names\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.addClass = function (value) {\n\t            var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t\n\t            if (classes.length) {\n\t                j = 0;\n\t                while (clazz = classes[j++]) {\n\t                    pos = curClasses.indexOf(clazz);\n\t                    if (!~pos) {\n\t                        curClasses.push(clazz);\n\t                    }\n\t                }\n\t\n\t                finalValue = curClasses.join(\" \");\n\t                if (className != finalValue) {\n\t                    elem.className.baseVal = finalValue;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.removeClass\n\t         [ method ]\n\t         **\n\t         * Removes given class name or list of class names from the element.\n\t         - value (string) class name or space separated list of class names\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.removeClass = function (value) {\n\t            var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t            if (curClasses.length) {\n\t                j = 0;\n\t                while (clazz = classes[j++]) {\n\t                    pos = curClasses.indexOf(clazz);\n\t                    if (~pos) {\n\t                        curClasses.splice(pos, 1);\n\t                    }\n\t                }\n\t\n\t                finalValue = curClasses.join(\" \");\n\t                if (className != finalValue) {\n\t                    elem.className.baseVal = finalValue;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.hasClass\n\t         [ method ]\n\t         **\n\t         * Checks if the element has a given class name in the list of class names applied to it.\n\t         - value (string) class name\n\t         **\n\t         = (boolean) `true` if the element has given class\n\t        \\*/\n\t        elproto.hasClass = function (value) {\n\t            var elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [];\n\t            return !!~curClasses.indexOf(value);\n\t        };\n\t        /*\\\n\t         * Element.toggleClass\n\t         [ method ]\n\t         **\n\t         * Add or remove one or more classes from the element, depending on either\n\t         * the class’s presence or the value of the `flag` argument.\n\t         - value (string) class name or space separated list of class names\n\t         - flag (boolean) value to determine whether the class should be added or removed\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.toggleClass = function (value, flag) {\n\t            if (flag != null) {\n\t                if (flag) {\n\t                    return this.addClass(value);\n\t                } else {\n\t                    return this.removeClass(value);\n\t                }\n\t            }\n\t            var classes = (value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t            j = 0;\n\t            while (clazz = classes[j++]) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                } else {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t            return this;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var operators = {\n\t            \"+\": function _(x, y) {\n\t                return x + y;\n\t            },\n\t            \"-\": function _(x, y) {\n\t                return x - y;\n\t            },\n\t            \"/\": function _(x, y) {\n\t                return x / y;\n\t            },\n\t            \"*\": function _(x, y) {\n\t                return x * y;\n\t            }\n\t        },\n\t            Str = String,\n\t            reUnit = /[a-z]+$/i,\n\t            reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t        function getNumber(val) {\n\t            return val;\n\t        }\n\t        function getUnit(unit) {\n\t            return function (val) {\n\t                return +val.toFixed(3) + unit;\n\t            };\n\t        }\n\t        eve.on(\"snap.util.attr\", function (val) {\n\t            var plus = Str(val).match(reAddon);\n\t            if (plus) {\n\t                var evnt = eve.nt(),\n\t                    name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                    a = this.attr(name),\n\t                    atr = {};\n\t                eve.stop();\n\t                var unit = plus[3] || \"\",\n\t                    aUnit = a.match(reUnit),\n\t                    op = operators[plus[1]];\n\t                if (aUnit && aUnit == unit) {\n\t                    val = op(parseFloat(a), +plus[2]);\n\t                } else {\n\t                    a = this.asPX(name);\n\t                    val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t                }\n\t                if (isNaN(a) || isNaN(val)) {\n\t                    return;\n\t                }\n\t                atr[name] = val;\n\t                this.attr(atr);\n\t            }\n\t        })(-10);\n\t        eve.on(\"snap.util.equal\", function (name, b) {\n\t            var A,\n\t                B,\n\t                a = Str(this.attr(name) || \"\"),\n\t                el = this,\n\t                bplus = Str(b).match(reAddon);\n\t            if (bplus) {\n\t                eve.stop();\n\t                var unit = bplus[3] || \"\",\n\t                    aUnit = a.match(reUnit),\n\t                    op = operators[bplus[1]];\n\t                if (aUnit && aUnit == unit) {\n\t                    return {\n\t                        from: parseFloat(a),\n\t                        to: op(parseFloat(a), +bplus[2]),\n\t                        f: getUnit(aUnit)\n\t                    };\n\t                } else {\n\t                    a = this.asPX(name);\n\t                    return {\n\t                        from: a,\n\t                        to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                        f: getNumber\n\t                    };\n\t                }\n\t            }\n\t        })(-10);\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var proto = Paper.prototype,\n\t            is = Snap.is;\n\t        /*\\\n\t         * Paper.rect\n\t         [ method ]\n\t         *\n\t         * Draws a rectangle\n\t         **\n\t         - x (number) x coordinate of the top left corner\n\t         - y (number) y coordinate of the top left corner\n\t         - width (number) width\n\t         - height (number) height\n\t         - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t         - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t         = (object) the `rect` element\n\t         **\n\t         > Usage\n\t         | // regular rectangle\n\t         | var c = paper.rect(10, 10, 50, 50);\n\t         | // rectangle with rounded corners\n\t         | var c = paper.rect(40, 40, 50, 50, 10);\n\t        \\*/\n\t        proto.rect = function (x, y, w, h, rx, ry) {\n\t            var attr;\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            if (is(x, \"object\") && x == \"[object Object]\") {\n\t                attr = x;\n\t            } else if (x != null) {\n\t                attr = {\n\t                    x: x,\n\t                    y: y,\n\t                    width: w,\n\t                    height: h\n\t                };\n\t                if (rx != null) {\n\t                    attr.rx = rx;\n\t                    attr.ry = ry;\n\t                }\n\t            }\n\t            return this.el(\"rect\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.circle\n\t         [ method ]\n\t         **\n\t         * Draws a circle\n\t         **\n\t         - x (number) x coordinate of the centre\n\t         - y (number) y coordinate of the centre\n\t         - r (number) radius\n\t         = (object) the `circle` element\n\t         **\n\t         > Usage\n\t         | var c = paper.circle(50, 50, 40);\n\t        \\*/\n\t        proto.circle = function (cx, cy, r) {\n\t            var attr;\n\t            if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t                attr = cx;\n\t            } else if (cx != null) {\n\t                attr = {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                };\n\t            }\n\t            return this.el(\"circle\", attr);\n\t        };\n\t\n\t        var preload = function () {\n\t            function onerror() {\n\t                this.parentNode.removeChild(this);\n\t            }\n\t            return function (src, f) {\n\t                var img = glob.doc.createElement(\"img\"),\n\t                    body = glob.doc.body;\n\t                img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t                img.onload = function () {\n\t                    f.call(img);\n\t                    img.onload = img.onerror = null;\n\t                    body.removeChild(img);\n\t                };\n\t                img.onerror = onerror;\n\t                body.appendChild(img);\n\t                img.src = src;\n\t            };\n\t        }();\n\t\n\t        /*\\\n\t         * Paper.image\n\t         [ method ]\n\t         **\n\t         * Places an image on the surface\n\t         **\n\t         - src (string) URI of the source image\n\t         - x (number) x offset position\n\t         - y (number) y offset position\n\t         - width (number) width of the image\n\t         - height (number) height of the image\n\t         = (object) the `image` element\n\t         * or\n\t         = (object) Snap element object with type `image`\n\t         **\n\t         > Usage\n\t         | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t        \\*/\n\t        proto.image = function (src, x, y, width, height) {\n\t            var el = this.el(\"image\");\n\t            if (is(src, \"object\") && \"src\" in src) {\n\t                el.attr(src);\n\t            } else if (src != null) {\n\t                var set = {\n\t                    \"xlink:href\": src,\n\t                    preserveAspectRatio: \"none\"\n\t                };\n\t                if (x != null && y != null) {\n\t                    set.x = x;\n\t                    set.y = y;\n\t                }\n\t                if (width != null && height != null) {\n\t                    set.width = width;\n\t                    set.height = height;\n\t                } else {\n\t                    preload(src, function () {\n\t                        Snap._.$(el.node, {\n\t                            width: this.offsetWidth,\n\t                            height: this.offsetHeight\n\t                        });\n\t                    });\n\t                }\n\t                Snap._.$(el.node, set);\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.ellipse\n\t         [ method ]\n\t         **\n\t         * Draws an ellipse\n\t         **\n\t         - x (number) x coordinate of the centre\n\t         - y (number) y coordinate of the centre\n\t         - rx (number) horizontal radius\n\t         - ry (number) vertical radius\n\t         = (object) the `ellipse` element\n\t         **\n\t         > Usage\n\t         | var c = paper.ellipse(50, 50, 40, 20);\n\t        \\*/\n\t        proto.ellipse = function (cx, cy, rx, ry) {\n\t            var attr;\n\t            if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t                attr = cx;\n\t            } else if (cx != null) {\n\t                attr = {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    rx: rx,\n\t                    ry: ry\n\t                };\n\t            }\n\t            return this.el(\"ellipse\", attr);\n\t        };\n\t        // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t        /*\\\n\t         * Paper.path\n\t         [ method ]\n\t         **\n\t         * Creates a `<path>` element using the given string as the path's definition\n\t         - pathString (string) #optional path string in SVG format\n\t         * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t         | \"M10,20L30,40\"\n\t         * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t         *\n\t         # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t         # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t         # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t         # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t         # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t         # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t         # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t         # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t         # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t         # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t         # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t         # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t         # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t         * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t         * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t         > Usage\n\t         | var c = paper.path(\"M10 10L90 90\");\n\t         | // draw a diagonal line:\n\t         | // move to 10,10, line to 90,90\n\t        \\*/\n\t        proto.path = function (d) {\n\t            var attr;\n\t            if (is(d, \"object\") && !is(d, \"array\")) {\n\t                attr = d;\n\t            } else if (d) {\n\t                attr = { d: d };\n\t            }\n\t            return this.el(\"path\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.g\n\t         [ method ]\n\t         **\n\t         * Creates a group element\n\t         **\n\t         - varargs (…) #optional elements to nest within the group\n\t         = (object) the `g` element\n\t         **\n\t         > Usage\n\t         | var c1 = paper.circle(),\n\t         |     c2 = paper.rect(),\n\t         |     g = paper.g(c2, c1); // note that the order of elements is different\n\t         * or\n\t         | var c1 = paper.circle(),\n\t         |     c2 = paper.rect(),\n\t         |     g = paper.g();\n\t         | g.add(c2, c1);\n\t        \\*/\n\t        /*\\\n\t         * Paper.group\n\t         [ method ]\n\t         **\n\t         * See @Paper.g\n\t        \\*/\n\t        proto.group = proto.g = function (first) {\n\t            var attr,\n\t                el = this.el(\"g\");\n\t            if (arguments.length == 1 && first && !first.type) {\n\t                el.attr(first);\n\t            } else if (arguments.length) {\n\t                el.add(Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.svg\n\t         [ method ]\n\t         **\n\t         * Creates a nested SVG element.\n\t         - x (number) @optional X of the element\n\t         - y (number) @optional Y of the element\n\t         - width (number) @optional width of the element\n\t         - height (number) @optional height of the element\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         **\n\t         = (object) the `svg` element\n\t         **\n\t        \\*/\n\t        proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t            var attrs = {};\n\t            if (is(x, \"object\") && y == null) {\n\t                attrs = x;\n\t            } else {\n\t                if (x != null) {\n\t                    attrs.x = x;\n\t                }\n\t                if (y != null) {\n\t                    attrs.y = y;\n\t                }\n\t                if (width != null) {\n\t                    attrs.width = width;\n\t                }\n\t                if (height != null) {\n\t                    attrs.height = height;\n\t                }\n\t                if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                    attrs.viewBox = [vbx, vby, vbw, vbh];\n\t                }\n\t            }\n\t            return this.el(\"svg\", attrs);\n\t        };\n\t        /*\\\n\t         * Paper.mask\n\t         [ method ]\n\t         **\n\t         * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t         **\n\t         = (object) the `mask` element\n\t         **\n\t        \\*/\n\t        proto.mask = function (first) {\n\t            var attr,\n\t                el = this.el(\"mask\");\n\t            if (arguments.length == 1 && first && !first.type) {\n\t                el.attr(first);\n\t            } else if (arguments.length) {\n\t                el.add(Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.ptrn\n\t         [ method ]\n\t         **\n\t         * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t         - x (number) @optional X of the element\n\t         - y (number) @optional Y of the element\n\t         - width (number) @optional width of the element\n\t         - height (number) @optional height of the element\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         **\n\t         = (object) the `pattern` element\n\t         **\n\t        \\*/\n\t        proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t            if (is(x, \"object\")) {\n\t                var attr = x;\n\t            } else {\n\t                attr = { patternUnits: \"userSpaceOnUse\" };\n\t                if (x) {\n\t                    attr.x = x;\n\t                }\n\t                if (y) {\n\t                    attr.y = y;\n\t                }\n\t                if (width != null) {\n\t                    attr.width = width;\n\t                }\n\t                if (height != null) {\n\t                    attr.height = height;\n\t                }\n\t                if (vx != null && vy != null && vw != null && vh != null) {\n\t                    attr.viewBox = [vx, vy, vw, vh];\n\t                } else {\n\t                    attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t                }\n\t            }\n\t            return this.el(\"pattern\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.use\n\t         [ method ]\n\t         **\n\t         * Creates a <use> element.\n\t         - id (string) @optional id of element to link\n\t         * or\n\t         - id (Element) @optional element to link\n\t         **\n\t         = (object) the `use` element\n\t         **\n\t        \\*/\n\t        proto.use = function (id) {\n\t            if (id != null) {\n\t                if (id instanceof Element) {\n\t                    if (!id.attr(\"id\")) {\n\t                        id.attr({ id: Snap._.id(id) });\n\t                    }\n\t                    id = id.attr(\"id\");\n\t                }\n\t                if (String(id).charAt() == \"#\") {\n\t                    id = id.substring(1);\n\t                }\n\t                return this.el(\"use\", { \"xlink:href\": \"#\" + id });\n\t            } else {\n\t                return Element.prototype.use.call(this);\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.symbol\n\t         [ method ]\n\t         **\n\t         * Creates a <symbol> element.\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         = (object) the `symbol` element\n\t         **\n\t        \\*/\n\t        proto.symbol = function (vx, vy, vw, vh) {\n\t            var attr = {};\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            }\n\t\n\t            return this.el(\"symbol\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.text\n\t         [ method ]\n\t         **\n\t         * Draws a text string\n\t         **\n\t         - x (number) x coordinate position\n\t         - y (number) y coordinate position\n\t         - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t         = (object) the `text` element\n\t         **\n\t         > Usage\n\t         | var t1 = paper.text(50, 50, \"Snap\");\n\t         | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t         | // Text path usage\n\t         | t1.attr({textpath: \"M10,10L100,100\"});\n\t         | // or\n\t         | var pth = paper.path(\"M10,10L100,100\");\n\t         | t1.attr({textpath: pth});\n\t        \\*/\n\t        proto.text = function (x, y, text) {\n\t            var attr = {};\n\t            if (is(x, \"object\")) {\n\t                attr = x;\n\t            } else if (x != null) {\n\t                attr = {\n\t                    x: x,\n\t                    y: y,\n\t                    text: text || \"\"\n\t                };\n\t            }\n\t            return this.el(\"text\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.line\n\t         [ method ]\n\t         **\n\t         * Draws a line\n\t         **\n\t         - x1 (number) x coordinate position of the start\n\t         - y1 (number) y coordinate position of the start\n\t         - x2 (number) x coordinate position of the end\n\t         - y2 (number) y coordinate position of the end\n\t         = (object) the `line` element\n\t         **\n\t         > Usage\n\t         | var t1 = paper.line(50, 50, 100, 100);\n\t        \\*/\n\t        proto.line = function (x1, y1, x2, y2) {\n\t            var attr = {};\n\t            if (is(x1, \"object\")) {\n\t                attr = x1;\n\t            } else if (x1 != null) {\n\t                attr = {\n\t                    x1: x1,\n\t                    x2: x2,\n\t                    y1: y1,\n\t                    y2: y2\n\t                };\n\t            }\n\t            return this.el(\"line\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.polyline\n\t         [ method ]\n\t         **\n\t         * Draws a polyline\n\t         **\n\t         - points (array) array of points\n\t         * or\n\t         - varargs (…) points\n\t         = (object) the `polyline` element\n\t         **\n\t         > Usage\n\t         | var p1 = paper.polyline([10, 10, 100, 100]);\n\t         | var p2 = paper.polyline(10, 10, 100, 100);\n\t        \\*/\n\t        proto.polyline = function (points) {\n\t            if (arguments.length > 1) {\n\t                points = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var attr = {};\n\t            if (is(points, \"object\") && !is(points, \"array\")) {\n\t                attr = points;\n\t            } else if (points != null) {\n\t                attr = { points: points };\n\t            }\n\t            return this.el(\"polyline\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.polygon\n\t         [ method ]\n\t         **\n\t         * Draws a polygon. See @Paper.polyline\n\t        \\*/\n\t        proto.polygon = function (points) {\n\t            if (arguments.length > 1) {\n\t                points = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var attr = {};\n\t            if (is(points, \"object\") && !is(points, \"array\")) {\n\t                attr = points;\n\t            } else if (points != null) {\n\t                attr = { points: points };\n\t            }\n\t            return this.el(\"polygon\", attr);\n\t        };\n\t        // gradients\n\t        (function () {\n\t            var $ = Snap._.$;\n\t            // gradients' helpers\n\t            /*\\\n\t             * Element.stops\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Returns array of gradient stops elements.\n\t             = (array) the stops array.\n\t            \\*/\n\t            function Gstops() {\n\t                return this.selectAll(\"stop\");\n\t            }\n\t            /*\\\n\t             * Element.addStop\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Adds another stop to the gradient.\n\t             - color (string) stops color\n\t             - offset (number) stops offset 0..100\n\t             = (object) gradient element\n\t            \\*/\n\t            function GaddStop(color, offset) {\n\t                var stop = $(\"stop\"),\n\t                    attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t                color = Snap.color(color);\n\t                attr[\"stop-color\"] = color.hex;\n\t                if (color.opacity < 1) {\n\t                    attr[\"stop-opacity\"] = color.opacity;\n\t                }\n\t                $(stop, attr);\n\t                var stops = this.stops(),\n\t                    inserted;\n\t                for (var i = 0; i < stops.length; i++) {\n\t                    var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n\t                    if (stopOffset > offset) {\n\t                        this.node.insertBefore(stop, stops[i].node);\n\t                        inserted = true;\n\t                        break;\n\t                    }\n\t                }\n\t                if (!inserted) {\n\t                    this.node.appendChild(stop);\n\t                }\n\t                return this;\n\t            }\n\t            function GgetBBox() {\n\t                if (this.type == \"linearGradient\") {\n\t                    var x1 = $(this.node, \"x1\") || 0,\n\t                        x2 = $(this.node, \"x2\") || 1,\n\t                        y1 = $(this.node, \"y1\") || 0,\n\t                        y2 = $(this.node, \"y2\") || 0;\n\t                    return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t                } else {\n\t                    var cx = this.node.cx || .5,\n\t                        cy = this.node.cy || .5,\n\t                        r = this.node.r || 0;\n\t                    return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t                }\n\t            }\n\t            /*\\\n\t             * Element.setStops\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n\t             - str (string) gradient descriptor part after `()`.\n\t             = (object) gradient element\n\t             | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t             | g.setStops(\"#fff-#000-#f00-#fc0\");\n\t            \\*/\n\t            function GsetStops(str) {\n\t                var grad = str,\n\t                    stops = this.stops();\n\t                if (typeof str == \"string\") {\n\t                    grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n\t                }\n\t                if (!Snap.is(grad, \"array\")) {\n\t                    return;\n\t                }\n\t                for (var i = 0; i < stops.length; i++) {\n\t                    if (grad[i]) {\n\t                        var color = Snap.color(grad[i].color),\n\t                            attr = { \"offset\": grad[i].offset + \"%\" };\n\t                        attr[\"stop-color\"] = color.hex;\n\t                        if (color.opacity < 1) {\n\t                            attr[\"stop-opacity\"] = color.opacity;\n\t                        }\n\t                        stops[i].attr(attr);\n\t                    } else {\n\t                        stops[i].remove();\n\t                    }\n\t                }\n\t                for (i = stops.length; i < grad.length; i++) {\n\t                    this.addStop(grad[i].color, grad[i].offset);\n\t                }\n\t                return this;\n\t            }\n\t            function gradient(defs, str) {\n\t                var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                    el;\n\t                if (!grad) {\n\t                    return null;\n\t                }\n\t                grad.params.unshift(defs);\n\t                if (grad.type.toLowerCase() == \"l\") {\n\t                    el = gradientLinear.apply(0, grad.params);\n\t                } else {\n\t                    el = gradientRadial.apply(0, grad.params);\n\t                }\n\t                if (grad.type != grad.type.toLowerCase()) {\n\t                    $(el.node, {\n\t                        gradientUnits: \"userSpaceOnUse\"\n\t                    });\n\t                }\n\t                var stops = grad.stops,\n\t                    len = stops.length;\n\t                for (var i = 0; i < len; i++) {\n\t                    var stop = stops[i];\n\t                    el.addStop(stop.color, stop.offset);\n\t                }\n\t                return el;\n\t            }\n\t            function gradientLinear(defs, x1, y1, x2, y2) {\n\t                var el = Snap._.make(\"linearGradient\", defs);\n\t                el.stops = Gstops;\n\t                el.addStop = GaddStop;\n\t                el.getBBox = GgetBBox;\n\t                el.setStops = GsetStops;\n\t                if (x1 != null) {\n\t                    $(el.node, {\n\t                        x1: x1,\n\t                        y1: y1,\n\t                        x2: x2,\n\t                        y2: y2\n\t                    });\n\t                }\n\t                return el;\n\t            }\n\t            function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t                var el = Snap._.make(\"radialGradient\", defs);\n\t                el.stops = Gstops;\n\t                el.addStop = GaddStop;\n\t                el.getBBox = GgetBBox;\n\t                if (cx != null) {\n\t                    $(el.node, {\n\t                        cx: cx,\n\t                        cy: cy,\n\t                        r: r\n\t                    });\n\t                }\n\t                if (fx != null && fy != null) {\n\t                    $(el.node, {\n\t                        fx: fx,\n\t                        fy: fy\n\t                    });\n\t                }\n\t                return el;\n\t            }\n\t            /*\\\n\t             * Paper.gradient\n\t             [ method ]\n\t             **\n\t             * Creates a gradient element\n\t             **\n\t             - gradient (string) gradient descriptor\n\t             > Gradient Descriptor\n\t             * The gradient descriptor is an expression formatted as\n\t             * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t             * either linear or radial.  The uppercase `L` or `R` letters\n\t             * indicate absolute coordinates offset from the SVG surface.\n\t             * Lowercase `l` or `r` letters indicate coordinates\n\t             * calculated relative to the element to which the gradient is\n\t             * applied.  Coordinates specify a linear gradient vector as\n\t             * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t             * `r` and optional `fx`, `fy` specifying a focal point away\n\t             * from the center of the circle. Specify `<colors>` as a list\n\t             * of dash-separated CSS color values.  Each color may be\n\t             * followed by a custom offset value, separated with a colon\n\t             * character.\n\t             > Examples\n\t             * Linear gradient, relative from top-left corner to bottom-right\n\t             * corner, from black through red to white:\n\t             | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t             * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t             * through red at 25% to white:\n\t             | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t             * Radial gradient, relative from the center of the element with radius\n\t             * half the width, from black to white:\n\t             | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t             * To apply the gradient:\n\t             | paper.circle(50, 50, 40).attr({\n\t             |     fill: g\n\t             | });\n\t             = (object) the `gradient` element\n\t            \\*/\n\t            proto.gradient = function (str) {\n\t                return gradient(this.defs, str);\n\t            };\n\t            proto.gradientLinear = function (x1, y1, x2, y2) {\n\t                return gradientLinear(this.defs, x1, y1, x2, y2);\n\t            };\n\t            proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t                return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t            };\n\t            /*\\\n\t             * Paper.toString\n\t             [ method ]\n\t             **\n\t             * Returns SVG code for the @Paper\n\t             = (string) SVG code for the @Paper\n\t            \\*/\n\t            proto.toString = function () {\n\t                var doc = this.node.ownerDocument,\n\t                    f = doc.createDocumentFragment(),\n\t                    d = doc.createElement(\"div\"),\n\t                    svg = this.node.cloneNode(true),\n\t                    res;\n\t                f.appendChild(d);\n\t                d.appendChild(svg);\n\t                Snap._.$(svg, { xmlns: \"http://www.w3.org/2000/svg\" });\n\t                res = d.innerHTML;\n\t                f.removeChild(f.firstChild);\n\t                return res;\n\t            };\n\t            /*\\\n\t             * Paper.toDataURL\n\t             [ method ]\n\t             **\n\t             * Returns SVG code for the @Paper as Data URI string.\n\t             = (string) Data URI string\n\t            \\*/\n\t            proto.toDataURL = function () {\n\t                if (window && window.btoa) {\n\t                    return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t                }\n\t            };\n\t            /*\\\n\t             * Paper.clear\n\t             [ method ]\n\t             **\n\t             * Removes all child nodes of the paper, except <defs>.\n\t            \\*/\n\t            proto.clear = function () {\n\t                var node = this.node.firstChild,\n\t                    next;\n\t                while (node) {\n\t                    next = node.nextSibling;\n\t                    if (node.tagName != \"defs\") {\n\t                        node.parentNode.removeChild(node);\n\t                    } else {\n\t                        proto.clear.call({ node: node });\n\t                    }\n\t                    node = next;\n\t                }\n\t            };\n\t        })();\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            clone = Snap._.clone,\n\t            has = \"hasOwnProperty\",\n\t            p2s = /,?([a-z]),?/gi,\n\t            toFloat = parseFloat,\n\t            math = Math,\n\t            PI = math.PI,\n\t            mmin = math.min,\n\t            mmax = math.max,\n\t            pow = math.pow,\n\t            abs = math.abs;\n\t        function paths(ps) {\n\t            var p = paths.ps = paths.ps || {};\n\t            if (p[ps]) {\n\t                p[ps].sleep = 100;\n\t            } else {\n\t                p[ps] = {\n\t                    sleep: 100\n\t                };\n\t            }\n\t            setTimeout(function () {\n\t                for (var key in p) {\n\t                    if (p[has](key) && key != ps) {\n\t                        p[key].sleep--;\n\t                        !p[key].sleep && delete p[key];\n\t                    }\n\t                }\n\t            });\n\t            return p[ps];\n\t        }\n\t        function box(x, y, width, height) {\n\t            if (x == null) {\n\t                x = y = width = height = 0;\n\t            }\n\t            if (y == null) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                x = x.x;\n\t            }\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                width: width,\n\t                w: width,\n\t                height: height,\n\t                h: height,\n\t                x2: x + width,\n\t                y2: y + height,\n\t                cx: x + width / 2,\n\t                cy: y + height / 2,\n\t                r1: math.min(width, height) / 2,\n\t                r2: math.max(width, height) / 2,\n\t                r0: math.sqrt(width * width + height * height) / 2,\n\t                path: rectPath(x, y, width, height),\n\t                vb: [x, y, width, height].join(\" \")\n\t            };\n\t        }\n\t        function toString() {\n\t            return this.join(\",\").replace(p2s, \"$1\");\n\t        }\n\t        function pathClone(pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t            if (length == null) {\n\t                return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t            } else {\n\t                return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t            }\n\t        }\n\t        function getLengthFactory(istotal, subpath) {\n\t            function O(val) {\n\t                return +(+val).toFixed(3);\n\t            }\n\t            return Snap._.cacher(function (path, length, onlystart) {\n\t                if (path instanceof Element) {\n\t                    path = path.attr(\"d\");\n\t                }\n\t                path = path2curve(path);\n\t                var x,\n\t                    y,\n\t                    p,\n\t                    l,\n\t                    sp = \"\",\n\t                    subpaths = {},\n\t                    point,\n\t                    len = 0;\n\t                for (var i = 0, ii = path.length; i < ii; i++) {\n\t                    p = path[i];\n\t                    if (p[0] == \"M\") {\n\t                        x = +p[1];\n\t                        y = +p[2];\n\t                    } else {\n\t                        l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                        if (len + l > length) {\n\t                            if (subpath && !subpaths.start) {\n\t                                point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                                sp += [\"C\" + O(point.start.x), O(point.start.y), O(point.m.x), O(point.m.y), O(point.x), O(point.y)];\n\t                                if (onlystart) {\n\t                                    return sp;\n\t                                }\n\t                                subpaths.start = sp;\n\t                                sp = [\"M\" + O(point.x), O(point.y) + \"C\" + O(point.n.x), O(point.n.y), O(point.end.x), O(point.end.y), O(p[5]), O(p[6])].join();\n\t                                len += l;\n\t                                x = +p[5];\n\t                                y = +p[6];\n\t                                continue;\n\t                            }\n\t                            if (!istotal && !subpath) {\n\t                                point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                                return point;\n\t                            }\n\t                        }\n\t                        len += l;\n\t                        x = +p[5];\n\t                        y = +p[6];\n\t                    }\n\t                    sp += p.shift() + p;\n\t                }\n\t                subpaths.end = sp;\n\t                point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t                return point;\n\t            }, null, Snap._.clone);\n\t        }\n\t        var getTotalLength = getLengthFactory(1),\n\t            getPointAtLength = getLengthFactory(),\n\t            getSubpathsAtLength = getLengthFactory(0, 1);\n\t        function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t,\n\t                t13 = pow(t1, 3),\n\t                t12 = pow(t1, 2),\n\t                t2 = t * t,\n\t                t3 = t2 * t,\n\t                x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t                y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t                mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t                my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t                nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t                ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t                ax = t1 * p1x + t * c1x,\n\t                ay = t1 * p1y + t * c1y,\n\t                cx = t1 * c2x + t * p2x,\n\t                cy = t1 * c2y + t * p2y,\n\t                alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n\t            // (mx > nx || my < ny) && (alpha += 180);\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                m: { x: mx, y: my },\n\t                n: { x: nx, y: ny },\n\t                start: { x: ax, y: ay },\n\t                end: { x: cx, y: cy },\n\t                alpha: alpha\n\t            };\n\t        }\n\t        function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            if (!Snap.is(p1x, \"array\")) {\n\t                p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t            }\n\t            var bbox = curveDim.apply(null, p1x);\n\t            return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n\t        }\n\t        function isPointInsideBBox(bbox, x, y) {\n\t            return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n\t        }\n\t        function isBBoxIntersect(bbox1, bbox2) {\n\t            bbox1 = box(bbox1);\n\t            bbox2 = box(bbox2);\n\t            return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t        }\n\t        function base3(t, p1, p2, p3, p4) {\n\t            var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t                t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t            return t * t2 - 3 * p1 + 3 * p2;\n\t        }\n\t        function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t            if (z == null) {\n\t                z = 1;\n\t            }\n\t            z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t            var z2 = z / 2,\n\t                n = 12,\n\t                Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],\n\t                Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n\t                sum = 0;\n\t            for (var i = 0; i < n; i++) {\n\t                var ct = z2 * Tvalues[i] + z2,\n\t                    xbase = base3(ct, x1, x2, x3, x4),\n\t                    ybase = base3(ct, y1, y2, y3, y4),\n\t                    comb = xbase * xbase + ybase * ybase;\n\t                sum += Cvalues[i] * math.sqrt(comb);\n\t            }\n\t            return z2 * sum;\n\t        }\n\t        function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t            if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t                return;\n\t            }\n\t            var t = 1,\n\t                step = t / 2,\n\t                t2 = t - step,\n\t                l,\n\t                e = .01;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t            while (abs(l - ll) > e) {\n\t                step /= 2;\n\t                t2 += (l < ll ? 1 : -1) * step;\n\t                l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t            }\n\t            return t2;\n\t        }\n\t        function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t            if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {\n\t                return;\n\t            }\n\t            var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t                ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t                denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t            if (!denominator) {\n\t                return;\n\t            }\n\t            var px = nx / denominator,\n\t                py = ny / denominator,\n\t                px2 = +px.toFixed(2),\n\t                py2 = +py.toFixed(2);\n\t            if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {\n\t                return;\n\t            }\n\t            return { x: px, y: py };\n\t        }\n\t        function inter(bez1, bez2) {\n\t            return interHelper(bez1, bez2);\n\t        }\n\t        function interCount(bez1, bez2) {\n\t            return interHelper(bez1, bez2, 1);\n\t        }\n\t        function interHelper(bez1, bez2, justCount) {\n\t            var bbox1 = bezierBBox(bez1),\n\t                bbox2 = bezierBBox(bez2);\n\t            if (!isBBoxIntersect(bbox1, bbox2)) {\n\t                return justCount ? 0 : [];\n\t            }\n\t            var l1 = bezlen.apply(0, bez1),\n\t                l2 = bezlen.apply(0, bez2),\n\t                n1 = ~~(l1 / 8),\n\t                n2 = ~~(l2 / 8),\n\t                dots1 = [],\n\t                dots2 = [],\n\t                xy = {},\n\t                res = justCount ? 0 : [];\n\t            for (var i = 0; i < n1 + 1; i++) {\n\t                var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t                dots1.push({ x: p.x, y: p.y, t: i / n1 });\n\t            }\n\t            for (i = 0; i < n2 + 1; i++) {\n\t                p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t                dots2.push({ x: p.x, y: p.y, t: i / n2 });\n\t            }\n\t            for (i = 0; i < n1; i++) {\n\t                for (var j = 0; j < n2; j++) {\n\t                    var di = dots1[i],\n\t                        di1 = dots1[i + 1],\n\t                        dj = dots2[j],\n\t                        dj1 = dots2[j + 1],\n\t                        ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                        cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                        is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                    if (is) {\n\t                        if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                            continue;\n\t                        }\n\t                        xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                            if (justCount) {\n\t                                res++;\n\t                            } else {\n\t                                res.push({\n\t                                    x: is.x,\n\t                                    y: is.y,\n\t                                    t1: t1,\n\t                                    t2: t2\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return res;\n\t        }\n\t        function pathIntersection(path1, path2) {\n\t            return interPathHelper(path1, path2);\n\t        }\n\t        function pathIntersectionNumber(path1, path2) {\n\t            return interPathHelper(path1, path2, 1);\n\t        }\n\t        function interPathHelper(path1, path2, justCount) {\n\t            path1 = path2curve(path1);\n\t            path2 = path2curve(path2);\n\t            var x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                x1m,\n\t                y1m,\n\t                x2m,\n\t                y2m,\n\t                bez1,\n\t                bez2,\n\t                res = justCount ? 0 : [];\n\t            for (var i = 0, ii = path1.length; i < ii; i++) {\n\t                var pi = path1[i];\n\t                if (pi[0] == \"M\") {\n\t                    x1 = x1m = pi[1];\n\t                    y1 = y1m = pi[2];\n\t                } else {\n\t                    if (pi[0] == \"C\") {\n\t                        bez1 = [x1, y1].concat(pi.slice(1));\n\t                        x1 = bez1[6];\n\t                        y1 = bez1[7];\n\t                    } else {\n\t                        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                        x1 = x1m;\n\t                        y1 = y1m;\n\t                    }\n\t                    for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                        var pj = path2[j];\n\t                        if (pj[0] == \"M\") {\n\t                            x2 = x2m = pj[1];\n\t                            y2 = y2m = pj[2];\n\t                        } else {\n\t                            if (pj[0] == \"C\") {\n\t                                bez2 = [x2, y2].concat(pj.slice(1));\n\t                                x2 = bez2[6];\n\t                                y2 = bez2[7];\n\t                            } else {\n\t                                bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                                x2 = x2m;\n\t                                y2 = y2m;\n\t                            }\n\t                            var intr = interHelper(bez1, bez2, justCount);\n\t                            if (justCount) {\n\t                                res += intr;\n\t                            } else {\n\t                                for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                    intr[k].segment1 = i;\n\t                                    intr[k].segment2 = j;\n\t                                    intr[k].bez1 = bez1;\n\t                                    intr[k].bez2 = bez2;\n\t                                }\n\t                                res = res.concat(intr);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return res;\n\t        }\n\t        function isPointInsidePath(path, x, y) {\n\t            var bbox = pathBBox(path);\n\t            return isPointInsideBBox(bbox, x, y) && interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t        }\n\t        function pathBBox(path) {\n\t            var pth = paths(path);\n\t            if (pth.bbox) {\n\t                return clone(pth.bbox);\n\t            }\n\t            if (!path) {\n\t                return box();\n\t            }\n\t            path = path2curve(path);\n\t            var x = 0,\n\t                y = 0,\n\t                X = [],\n\t                Y = [],\n\t                p;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = p[1];\n\t                    y = p[2];\n\t                    X.push(x);\n\t                    Y.push(y);\n\t                } else {\n\t                    var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    X = X.concat(dim.min.x, dim.max.x);\n\t                    Y = Y.concat(dim.min.y, dim.max.y);\n\t                    x = p[5];\n\t                    y = p[6];\n\t                }\n\t            }\n\t            var xmin = mmin.apply(0, X),\n\t                ymin = mmin.apply(0, Y),\n\t                xmax = mmax.apply(0, X),\n\t                ymax = mmax.apply(0, Y),\n\t                bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t            pth.bbox = clone(bb);\n\t            return bb;\n\t        }\n\t        function rectPath(x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", +x + +r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        function ellipsePath(x, y, rx, ry, a) {\n\t            if (a == null && ry == null) {\n\t                ry = rx;\n\t            }\n\t            x = +x;\n\t            y = +y;\n\t            rx = +rx;\n\t            ry = +ry;\n\t            if (a != null) {\n\t                var rad = Math.PI / 180,\n\t                    x1 = x + rx * Math.cos(-ry * rad),\n\t                    x2 = x + rx * Math.cos(-a * rad),\n\t                    y1 = y + rx * Math.sin(-ry * rad),\n\t                    y2 = y + rx * Math.sin(-a * rad),\n\t                    res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t            } else {\n\t                res = [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t            }\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        var unit2px = Snap._unit2px,\n\t            getPath = {\n\t            path: function path(el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function circle(el) {\n\t                var attr = unit2px(el);\n\t                return ellipsePath(attr.cx, attr.cy, attr.r);\n\t            },\n\t            ellipse: function ellipse(el) {\n\t                var attr = unit2px(el);\n\t                return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t            },\n\t            rect: function rect(el) {\n\t                var attr = unit2px(el);\n\t                return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t            },\n\t            image: function image(el) {\n\t                var attr = unit2px(el);\n\t                return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t            },\n\t            line: function line(el) {\n\t                return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t            },\n\t            polyline: function polyline(el) {\n\t                return \"M\" + el.attr(\"points\");\n\t            },\n\t            polygon: function polygon(el) {\n\t                return \"M\" + el.attr(\"points\") + \"z\";\n\t            },\n\t            deflt: function deflt(el) {\n\t                var bbox = el.node.getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        };\n\t        function pathToRelative(pathArray) {\n\t            var pth = paths(pathArray),\n\t                lowerCase = String.prototype.toLowerCase;\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t                pathArray = Snap.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = toString;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        }\n\t        function pathToAbsolute(pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) {\n\t                // rough assumption\n\t                pathArray = Snap.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0,\n\t                pa0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                pa0 = pa[0];\n\t                if (pa0 != pa0.toUpperCase()) {\n\t                    r[0] = pa0.toUpperCase();\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +pa[6] + x;\n\t                            r[7] = +pa[7] + y;\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y].concat(pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res.concat(catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"O\":\n\t                            res.pop();\n\t                            dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                            dots.push(dots[0]);\n\t                            res = res.concat(dots);\n\t                            break;\n\t                        case \"U\":\n\t                            res.pop();\n\t                            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                            r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + (j % 2 ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa0 == \"R\") {\n\t                    dots = [x, y].concat(pa.slice(1));\n\t                    res.pop();\n\t                    res = res.concat(catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"].concat(pa.slice(-2));\n\t                } else if (pa0 == \"O\") {\n\t                    res.pop();\n\t                    dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                    dots.push(dots[0]);\n\t                    res = res.concat(dots);\n\t                } else if (pa0 == \"U\") {\n\t                    res.pop();\n\t                    res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                    r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                pa0 = pa0.toUpperCase();\n\t                if (pa0 != \"O\") {\n\t                    switch (r[0]) {\n\t                        case \"Z\":\n\t                            x = +mx;\n\t                            y = +my;\n\t                            break;\n\t                        case \"H\":\n\t                            x = r[1];\n\t                            break;\n\t                        case \"V\":\n\t                            y = r[1];\n\t                            break;\n\t                        case \"M\":\n\t                            mx = r[r.length - 2];\n\t                            my = r[r.length - 1];\n\t                        default:\n\t                            x = r[r.length - 2];\n\t                            y = r[r.length - 1];\n\t                    }\n\t                }\n\t            }\n\t            res.toString = toString;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        }\n\t        function l2c(x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        }\n\t        function q2c(x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n\t        }\n\t        function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return { x: X, y: Y };\n\t            });\n\t            if (!rx || !ry) {\n\t                return [x1, y1, x2, y2, x2, y2];\n\t            }\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = x * x / (rx * rx) + y * y / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4].concat(res);\n\t            } else {\n\t                res = [m2, m3, m4].concat(res).join().split(\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        }\n\t        function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        }\n\t\n\t        // Returns bounding box of cubic bezier curve.\n\t        // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t        // Original version: NISHIO Hirokazu\n\t        // Modifications: https://github.com/timo22345\n\t        function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t            var tvalues = [],\n\t                bounds = [[], []],\n\t                a,\n\t                b,\n\t                c,\n\t                t,\n\t                t1,\n\t                t2,\n\t                b2ac,\n\t                sqrtb2ac;\n\t            for (var i = 0; i < 2; ++i) {\n\t                if (i == 0) {\n\t                    b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                    c = 3 * x1 - 3 * x0;\n\t                } else {\n\t                    b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                    a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                    c = 3 * y1 - 3 * y0;\n\t                }\n\t                if (abs(a) < 1e-12) {\n\t                    if (abs(b) < 1e-12) {\n\t                        continue;\n\t                    }\n\t                    t = -c / b;\n\t                    if (0 < t && t < 1) {\n\t                        tvalues.push(t);\n\t                    }\n\t                    continue;\n\t                }\n\t                b2ac = b * b - 4 * c * a;\n\t                sqrtb2ac = math.sqrt(b2ac);\n\t                if (b2ac < 0) {\n\t                    continue;\n\t                }\n\t                t1 = (-b + sqrtb2ac) / (2 * a);\n\t                if (0 < t1 && t1 < 1) {\n\t                    tvalues.push(t1);\n\t                }\n\t                t2 = (-b - sqrtb2ac) / (2 * a);\n\t                if (0 < t2 && t2 < 1) {\n\t                    tvalues.push(t2);\n\t                }\n\t            }\n\t\n\t            var x,\n\t                y,\n\t                j = tvalues.length,\n\t                jlen = j,\n\t                mt;\n\t            while (j--) {\n\t                t = tvalues[j];\n\t                mt = 1 - t;\n\t                bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n\t                bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n\t            }\n\t\n\t            bounds[0][jlen] = x0;\n\t            bounds[1][jlen] = y0;\n\t            bounds[0][jlen + 1] = x3;\n\t            bounds[1][jlen + 1] = y3;\n\t            bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t            return {\n\t                min: { x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1]) },\n\t                max: { x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1]) }\n\t            };\n\t        }\n\t\n\t        function path2curve(path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n\t                attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n\t                processPath = function processPath(path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") {\n\t                            // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx; // And reflect the previous\n\t                            ny = d.y * 2 - d.by; // command's control point relative to the current point.\n\t                        } else {\n\t                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") {\n\t                            // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy; // to case \"S\".\n\t                        } else {\n\t                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t                fixArc = function fixArc(pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t                fixM = function fixM(path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t                pcoms1 = [],\n\t                // path commands of original path p\n\t            pcoms2 = [],\n\t                // path commands of original path p2\n\t            pfirst = \"\",\n\t                // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                    {\n\t                        pcoms1[i] = pfirst; // Save current path command\n\t                        i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t                    }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\t\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t                if (p2) {\n\t                    // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\") {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i - 1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                    if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                        pcoms2[i] = \"C\";\n\t                    }\n\t\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }\n\t        function mapPath(path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        }\n\t\n\t        // http://schepers.cc/getting-to-the-point\n\t        function catmullRom2bezier(crp, z) {\n\t            var d = [];\n\t            for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t                var p = [{ x: +crp[i - 2], y: +crp[i - 1] }, { x: +crp[i], y: +crp[i + 1] }, { x: +crp[i + 2], y: +crp[i + 3] }, { x: +crp[i + 4], y: +crp[i + 5] }];\n\t                if (z) {\n\t                    if (!i) {\n\t                        p[0] = { x: +crp[iLen - 2], y: +crp[iLen - 1] };\n\t                    } else if (iLen - 4 == i) {\n\t                        p[3] = { x: +crp[0], y: +crp[1] };\n\t                    } else if (iLen - 2 == i) {\n\t                        p[2] = { x: +crp[0], y: +crp[1] };\n\t                        p[3] = { x: +crp[2], y: +crp[3] };\n\t                    }\n\t                } else {\n\t                    if (iLen - 4 == i) {\n\t                        p[3] = p[2];\n\t                    } else if (!i) {\n\t                        p[0] = { x: +crp[i], y: +crp[i + 1] };\n\t                    }\n\t                }\n\t                d.push([\"C\", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n\t            }\n\t\n\t            return d;\n\t        }\n\t\n\t        // export\n\t        Snap.path = paths;\n\t\n\t        /*\\\n\t         * Snap.path.getTotalLength\n\t         [ method ]\n\t         **\n\t         * Returns the length of the given path in pixels\n\t         **\n\t         - path (string) SVG path string\n\t         **\n\t         = (number) length\n\t        \\*/\n\t        Snap.path.getTotalLength = getTotalLength;\n\t        /*\\\n\t         * Snap.path.getPointAtLength\n\t         [ method ]\n\t         **\n\t         * Returns the coordinates of the point located at the given length along the given path\n\t         **\n\t         - path (string) SVG path string\n\t         - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t         **\n\t         = (object) representation of the point:\n\t         o {\n\t         o     x: (number) x coordinate,\n\t         o     y: (number) y coordinate,\n\t         o     alpha: (number) angle of derivative\n\t         o }\n\t        \\*/\n\t        Snap.path.getPointAtLength = getPointAtLength;\n\t        /*\\\n\t         * Snap.path.getSubpath\n\t         [ method ]\n\t         **\n\t         * Returns the subpath of a given path between given start and end lengths\n\t         **\n\t         - path (string) SVG path string\n\t         - from (number) length, in pixels, from the start of the path to the start of the segment\n\t         - to (number) length, in pixels, from the start of the path to the end of the segment\n\t         **\n\t         = (string) path string definition for the segment\n\t        \\*/\n\t        Snap.path.getSubpath = function (path, from, to) {\n\t            if (this.getTotalLength(path) - to < 1e-6) {\n\t                return getSubpathsAtLength(path, from).end;\n\t            }\n\t            var a = getSubpathsAtLength(path, to, 1);\n\t            return from ? getSubpathsAtLength(a, from).end : a;\n\t        };\n\t        /*\\\n\t         * Element.getTotalLength\n\t         [ method ]\n\t         **\n\t         * Returns the length of the path in pixels (only works for `path` elements)\n\t         = (number) length\n\t        \\*/\n\t        elproto.getTotalLength = function () {\n\t            if (this.node.getTotalLength) {\n\t                return this.node.getTotalLength();\n\t            }\n\t        };\n\t        // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t        /*\\\n\t         * Element.getPointAtLength\n\t         [ method ]\n\t         **\n\t         * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t         **\n\t         - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t         **\n\t         = (object) representation of the point:\n\t         o {\n\t         o     x: (number) x coordinate,\n\t         o     y: (number) y coordinate,\n\t         o     alpha: (number) angle of derivative\n\t         o }\n\t        \\*/\n\t        elproto.getPointAtLength = function (length) {\n\t            return getPointAtLength(this.attr(\"d\"), length);\n\t        };\n\t        // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t        /*\\\n\t         * Element.getSubpath\n\t         [ method ]\n\t         **\n\t         * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t         **\n\t         - from (number) length, in pixels, from the start of the path to the start of the segment\n\t         - to (number) length, in pixels, from the start of the path to the end of the segment\n\t         **\n\t         = (string) path string definition for the segment\n\t        \\*/\n\t        elproto.getSubpath = function (from, to) {\n\t            return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t        };\n\t        Snap._.box = box;\n\t        /*\\\n\t         * Snap.path.findDotsAtSegment\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Finds dot coordinates on the given cubic beziér curve at the given t\n\t         - p1x (number) x of the first point of the curve\n\t         - p1y (number) y of the first point of the curve\n\t         - c1x (number) x of the first anchor of the curve\n\t         - c1y (number) y of the first anchor of the curve\n\t         - c2x (number) x of the second anchor of the curve\n\t         - c2y (number) y of the second anchor of the curve\n\t         - p2x (number) x of the second point of the curve\n\t         - p2y (number) y of the second point of the curve\n\t         - t (number) position on the curve (0..1)\n\t         = (object) point information in format:\n\t         o {\n\t         o     x: (number) x coordinate of the point,\n\t         o     y: (number) y coordinate of the point,\n\t         o     m: {\n\t         o         x: (number) x coordinate of the left anchor,\n\t         o         y: (number) y coordinate of the left anchor\n\t         o     },\n\t         o     n: {\n\t         o         x: (number) x coordinate of the right anchor,\n\t         o         y: (number) y coordinate of the right anchor\n\t         o     },\n\t         o     start: {\n\t         o         x: (number) x coordinate of the start of the curve,\n\t         o         y: (number) y coordinate of the start of the curve\n\t         o     },\n\t         o     end: {\n\t         o         x: (number) x coordinate of the end of the curve,\n\t         o         y: (number) y coordinate of the end of the curve\n\t         o     },\n\t         o     alpha: (number) angle of the curve derivative at the point\n\t         o }\n\t        \\*/\n\t        Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t        /*\\\n\t         * Snap.path.bezierBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns the bounding box of a given cubic beziér curve\n\t         - p1x (number) x of the first point of the curve\n\t         - p1y (number) y of the first point of the curve\n\t         - c1x (number) x of the first anchor of the curve\n\t         - c1y (number) y of the first anchor of the curve\n\t         - c2x (number) x of the second anchor of the curve\n\t         - c2y (number) y of the second anchor of the curve\n\t         - p2x (number) x of the second point of the curve\n\t         - p2y (number) y of the second point of the curve\n\t         * or\n\t         - bez (array) array of six points for beziér curve\n\t         = (object) bounding box\n\t         o {\n\t         o     x: (number) x coordinate of the left top point of the box,\n\t         o     y: (number) y coordinate of the left top point of the box,\n\t         o     x2: (number) x coordinate of the right bottom point of the box,\n\t         o     y2: (number) y coordinate of the right bottom point of the box,\n\t         o     width: (number) width of the box,\n\t         o     height: (number) height of the box\n\t         o }\n\t        \\*/\n\t        Snap.path.bezierBBox = bezierBBox;\n\t        /*\\\n\t         * Snap.path.isPointInsideBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if given point is inside bounding box\n\t         - bbox (string) bounding box\n\t         - x (string) x coordinate of the point\n\t         - y (string) y coordinate of the point\n\t         = (boolean) `true` if point is inside\n\t        \\*/\n\t        Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t        Snap.closest = function (x, y, X, Y) {\n\t            var r = 100,\n\t                b = box(x - r / 2, y - r / 2, r, r),\n\t                inside = [],\n\t                getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t                found = 0;\n\t            while (r <= 1e6 && !found) {\n\t                for (var i = 0, ii = X.length; i < ii; i++) {\n\t                    var xy = getter(i);\n\t                    if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                        found++;\n\t                        inside.push(xy);\n\t                        break;\n\t                    }\n\t                }\n\t                if (!found) {\n\t                    r *= 2;\n\t                    b = box(x - r / 2, y - r / 2, r, r);\n\t                }\n\t            }\n\t            if (r == 1e6) {\n\t                return;\n\t            }\n\t            var len = Infinity,\n\t                res;\n\t            for (i = 0, ii = inside.length; i < ii; i++) {\n\t                var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t                if (len > l) {\n\t                    len = l;\n\t                    inside[i].len = l;\n\t                    res = inside[i];\n\t                }\n\t            }\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Snap.path.isBBoxIntersect\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if two bounding boxes intersect\n\t         - bbox1 (string) first bounding box\n\t         - bbox2 (string) second bounding box\n\t         = (boolean) `true` if bounding boxes intersect\n\t        \\*/\n\t        Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t        /*\\\n\t         * Snap.path.intersection\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Finds intersections of two paths\n\t         - path1 (string) path string\n\t         - path2 (string) path string\n\t         = (array) dots of intersection\n\t         o [\n\t         o     {\n\t         o         x: (number) x coordinate of the point,\n\t         o         y: (number) y coordinate of the point,\n\t         o         t1: (number) t value for segment of path1,\n\t         o         t2: (number) t value for segment of path2,\n\t         o         segment1: (number) order number for segment of path1,\n\t         o         segment2: (number) order number for segment of path2,\n\t         o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t         o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t         o     }\n\t         o ]\n\t        \\*/\n\t        Snap.path.intersection = pathIntersection;\n\t        Snap.path.intersectionNumber = pathIntersectionNumber;\n\t        /*\\\n\t         * Snap.path.isPointInside\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if given point is inside a given closed path.\n\t         *\n\t         * Note: fill mode doesn’t affect the result of this method.\n\t         - path (string) path string\n\t         - x (number) x of the point\n\t         - y (number) y of the point\n\t         = (boolean) `true` if point is inside the path\n\t        \\*/\n\t        Snap.path.isPointInside = isPointInsidePath;\n\t        /*\\\n\t         * Snap.path.getBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns the bounding box of a given path\n\t         - path (string) path string\n\t         = (object) bounding box\n\t         o {\n\t         o     x: (number) x coordinate of the left top point of the box,\n\t         o     y: (number) y coordinate of the left top point of the box,\n\t         o     x2: (number) x coordinate of the right bottom point of the box,\n\t         o     y2: (number) y coordinate of the right bottom point of the box,\n\t         o     width: (number) width of the box,\n\t         o     height: (number) height of the box\n\t         o }\n\t        \\*/\n\t        Snap.path.getBBox = pathBBox;\n\t        Snap.path.get = getPath;\n\t        /*\\\n\t         * Snap.path.toRelative\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path coordinates into relative values\n\t         - path (string) path string\n\t         = (array) path string\n\t        \\*/\n\t        Snap.path.toRelative = pathToRelative;\n\t        /*\\\n\t         * Snap.path.toAbsolute\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path coordinates into absolute values\n\t         - path (string) path string\n\t         = (array) path string\n\t        \\*/\n\t        Snap.path.toAbsolute = pathToAbsolute;\n\t        /*\\\n\t         * Snap.path.toCubic\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path to a new path where all segments are cubic beziér curves\n\t         - pathString (string|array) path string or array of segments\n\t         = (array) array of segments\n\t        \\*/\n\t        Snap.path.toCubic = path2curve;\n\t        /*\\\n\t         * Snap.path.map\n\t         [ method ]\n\t         **\n\t         * Transform the path string with the given matrix\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        Snap.path.map = mapPath;\n\t        Snap.path.toString = toString;\n\t        Snap.path.clone = pathClone;\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var mmax = Math.max,\n\t            mmin = Math.min;\n\t\n\t        // Set\n\t        var Set = function Set(items) {\n\t            this.items = [];\n\t            this.bindings = {};\n\t            this.length = 0;\n\t            this.type = \"set\";\n\t            if (items) {\n\t                for (var i = 0, ii = items.length; i < ii; i++) {\n\t                    if (items[i]) {\n\t                        this[this.items.length] = this.items[this.items.length] = items[i];\n\t                        this.length++;\n\t                    }\n\t                }\n\t            }\n\t        },\n\t            setproto = Set.prototype;\n\t        /*\\\n\t         * Set.push\n\t         [ method ]\n\t         **\n\t         * Adds each argument to the current set\n\t         = (object) original element\n\t        \\*/\n\t        setproto.push = function () {\n\t            var item, len;\n\t            for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t                item = arguments[i];\n\t                if (item) {\n\t                    len = this.items.length;\n\t                    this[len] = this.items[len] = item;\n\t                    this.length++;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.pop\n\t         [ method ]\n\t         **\n\t         * Removes last element and returns it\n\t         = (object) element\n\t        \\*/\n\t        setproto.pop = function () {\n\t            this.length && delete this[this.length--];\n\t            return this.items.pop();\n\t        };\n\t        /*\\\n\t         * Set.forEach\n\t         [ method ]\n\t         **\n\t         * Executes given function for each element in the set\n\t         *\n\t         * If the function returns `false`, the loop stops running.\n\t         **\n\t         - callback (function) function to run\n\t         - thisArg (object) context object for the callback\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.forEach = function (callback, thisArg) {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                if (callback.call(thisArg, this.items[i], i) === false) {\n\t                    return this;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.animate\n\t         [ method ]\n\t         **\n\t         * Animates each element in set in sync.\n\t         *\n\t         **\n\t         - attrs (object) key-value pairs of destination attributes\n\t         - duration (number) duration of the animation in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function that executes when the animation ends\n\t         * or\n\t         - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t         > Usage\n\t         | // animate all elements in set to radius 10\n\t         | set.animate({r: 10}, 500, mina.easein);\n\t         | // or\n\t         | // animate first element to radius 10, but second to radius 20 and in different time\n\t         | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t         = (Element) the current element\n\t        \\*/\n\t        setproto.animate = function (attrs, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            if (attrs instanceof Snap._.Animation) {\n\t                callback = attrs.callback;\n\t                easing = attrs.easing;\n\t                ms = easing.dur;\n\t                attrs = attrs.attr;\n\t            }\n\t            var args = arguments;\n\t            if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t                var each = true;\n\t            }\n\t            var begin,\n\t                handler = function handler() {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t                cb = 0,\n\t                set = this,\n\t                callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t            return this.forEach(function (el, i) {\n\t                eve.once(\"snap.animcreated.\" + el.id, handler);\n\t                if (each) {\n\t                    args[i] && el.animate.apply(el, args[i]);\n\t                } else {\n\t                    el.animate(attrs, ms, easing, callbacker);\n\t                }\n\t            });\n\t        };\n\t        /*\\\n\t         * Set.remove\n\t         [ method ]\n\t         **\n\t         * Removes all children of the set.\n\t         *\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.remove = function () {\n\t            while (this.length) {\n\t                this.pop().remove();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.bind\n\t         [ method ]\n\t         **\n\t         * Specifies how to handle a specific attribute when applied\n\t         * to a set.\n\t         *\n\t         **\n\t         - attr (string) attribute name\n\t         - callback (function) function to run\n\t         * or\n\t         - attr (string) attribute name\n\t         - element (Element) specific element in the set to apply the attribute to\n\t         * or\n\t         - attr (string) attribute name\n\t         - element (Element) specific element in the set to apply the attribute to\n\t         - eattr (string) attribute on the element to bind the attribute to\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.bind = function (attr, a, b) {\n\t            var data = {};\n\t            if (typeof a == \"function\") {\n\t                this.bindings[attr] = a;\n\t            } else {\n\t                var aname = b || attr;\n\t                this.bindings[attr] = function (v) {\n\t                    data[aname] = v;\n\t                    a.attr(data);\n\t                };\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.attr\n\t         [ method ]\n\t         **\n\t         * Equivalent of @Element.attr.\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.attr = function (value) {\n\t            var unbound = {};\n\t            for (var k in value) {\n\t                if (this.bindings[k]) {\n\t                    this.bindings[k](value[k]);\n\t                } else {\n\t                    unbound[k] = value[k];\n\t                }\n\t            }\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(unbound);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.clear\n\t         [ method ]\n\t         **\n\t         * Removes all elements from the set\n\t        \\*/\n\t        setproto.clear = function () {\n\t            while (this.length) {\n\t                this.pop();\n\t            }\n\t        };\n\t        /*\\\n\t         * Set.splice\n\t         [ method ]\n\t         **\n\t         * Removes range of elements from the set\n\t         **\n\t         - index (number) position of the deletion\n\t         - count (number) number of element to remove\n\t         - insertion… (object) #optional elements to insert\n\t         = (object) set elements that were deleted\n\t        \\*/\n\t        setproto.splice = function (index, count, insertion) {\n\t            index = index < 0 ? mmax(this.length + index, 0) : index;\n\t            count = mmax(0, mmin(this.length - index, count));\n\t            var tail = [],\n\t                todel = [],\n\t                args = [],\n\t                i;\n\t            for (i = 2; i < arguments.length; i++) {\n\t                args.push(arguments[i]);\n\t            }\n\t            for (i = 0; i < count; i++) {\n\t                todel.push(this[index + i]);\n\t            }\n\t            for (; i < this.length - index; i++) {\n\t                tail.push(this[index + i]);\n\t            }\n\t            var arglen = args.length;\n\t            for (i = 0; i < arglen + tail.length; i++) {\n\t                this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t            }\n\t            i = this.items.length = this.length -= count - arglen;\n\t            while (this[i]) {\n\t                delete this[i++];\n\t            }\n\t            return new Set(todel);\n\t        };\n\t        /*\\\n\t         * Set.exclude\n\t         [ method ]\n\t         **\n\t         * Removes given element from the set\n\t         **\n\t         - element (object) element to remove\n\t         = (boolean) `true` if object was found and removed from the set\n\t        \\*/\n\t        setproto.exclude = function (el) {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (this[i] == el) {\n\t                    this.splice(i, 1);\n\t                    return true;\n\t                }\n\t            }return false;\n\t        };\n\t        /*\\\n\t         * Set.insertAfter\n\t         [ method ]\n\t         **\n\t         * Inserts set elements after given element.\n\t         **\n\t         - element (object) set will be inserted after this element\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.insertAfter = function (el) {\n\t            var i = this.items.length;\n\t            while (i--) {\n\t                this.items[i].insertAfter(el);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.getBBox\n\t         [ method ]\n\t         **\n\t         * Union of all bboxes of the set. See @Element.getBBox.\n\t         = (object) bounding box descriptor. See @Element.getBBox.\n\t        \\*/\n\t        setproto.getBBox = function () {\n\t            var x = [],\n\t                y = [],\n\t                x2 = [],\n\t                y2 = [];\n\t            for (var i = this.items.length; i--;) {\n\t                if (!this.items[i].removed) {\n\t                    var box = this.items[i].getBBox();\n\t                    x.push(box.x);\n\t                    y.push(box.y);\n\t                    x2.push(box.x + box.width);\n\t                    y2.push(box.y + box.height);\n\t                }\n\t            }x = mmin.apply(0, x);\n\t            y = mmin.apply(0, y);\n\t            x2 = mmax.apply(0, x2);\n\t            y2 = mmax.apply(0, y2);\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                x2: x2,\n\t                y2: y2,\n\t                width: x2 - x,\n\t                height: y2 - y,\n\t                cx: x + (x2 - x) / 2,\n\t                cy: y + (y2 - y) / 2\n\t            };\n\t        };\n\t        /*\\\n\t         * Set.insertAfter\n\t         [ method ]\n\t         **\n\t         * Creates a clone of the set.\n\t         **\n\t         = (object) New Set object\n\t        \\*/\n\t        setproto.clone = function (s) {\n\t            s = new Set();\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                s.push(this.items[i].clone());\n\t            }\n\t            return s;\n\t        };\n\t        setproto.toString = function () {\n\t            return \"Snap\\u2018s set\";\n\t        };\n\t        setproto.type = \"set\";\n\t        // export\n\t        /*\\\n\t         * Snap.Set\n\t         [ property ]\n\t         **\n\t         * Set constructor.\n\t        \\*/\n\t        Snap.Set = Set;\n\t        /*\\\n\t         * Snap.set\n\t         [ method ]\n\t         **\n\t         * Creates a set and fills it with list of arguments.\n\t         **\n\t         = (object) New Set object\n\t         | var r = paper.rect(0, 0, 10, 10),\n\t         |     s1 = Snap.set(), // empty set\n\t         |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n\t        \\*/\n\t        Snap.set = function () {\n\t            var set = new Set();\n\t            if (arguments.length) {\n\t                set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return set;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var names = {},\n\t            reUnit = /[%a-z]+$/i,\n\t            Str = String;\n\t        names.stroke = names.fill = \"colour\";\n\t        function getEmpty(item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\":\n\t                    return [l, 0, 0];\n\t                case \"m\":\n\t                    return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\":\n\t                    if (item.length == 4) {\n\t                        return [l, 0, item[2], item[3]];\n\t                    } else {\n\t                        return [l, 0];\n\t                    }\n\t                case \"s\":\n\t                    if (item.length == 5) {\n\t                        return [l, 1, 1, item[3], item[4]];\n\t                    } else if (item.length == 3) {\n\t                        return [l, 1, 1];\n\t                    } else {\n\t                        return [l, 1];\n\t                    }\n\t            }\n\t        }\n\t        function equaliseTransform(t1, t2, getBBox) {\n\t            t1 = t1 || new Snap.Matrix();\n\t            t2 = t2 || new Snap.Matrix();\n\t            t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n\t            t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n\t            var maxlength = Math.max(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0,\n\t                j,\n\t                jj,\n\t                tt1,\n\t                tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if (tt1[0] != tt2[0] || tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) || tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: path2array(from),\n\t                to: path2array(to),\n\t                f: getPath(from)\n\t            };\n\t        }\n\t        function getNumber(val) {\n\t            return val;\n\t        }\n\t        function getUnit(unit) {\n\t            return function (val) {\n\t                return +val.toFixed(3) + unit;\n\t            };\n\t        }\n\t        function getViewBox(val) {\n\t            return val.join(\" \");\n\t        }\n\t        function getColour(clr) {\n\t            return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n\t        }\n\t        function getPath(path) {\n\t            var k = 0,\n\t                i,\n\t                ii,\n\t                j,\n\t                jj,\n\t                out,\n\t                a,\n\t                b = [];\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                out = \"[\";\n\t                a = ['\"' + path[i][0] + '\"'];\n\t                for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                    a[j] = \"val[\" + k++ + \"]\";\n\t                }\n\t                out += a + \"]\";\n\t                b[i] = out;\n\t            }\n\t            return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t        }\n\t        function path2array(path) {\n\t            var out = [];\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                    out.push(path[i][j]);\n\t                }\n\t            }\n\t            return out;\n\t        }\n\t        function isNumeric(obj) {\n\t            return isFinite(obj);\n\t        }\n\t        function arrayEqual(arr1, arr2) {\n\t            if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t                return false;\n\t            }\n\t            return arr1.toString() == arr2.toString();\n\t        }\n\t        Element.prototype.equal = function (name, b) {\n\t            return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t        };\n\t        eve.on(\"snap.util.equal\", function (name, b) {\n\t            var A,\n\t                B,\n\t                a = Str(this.attr(name) || \"\"),\n\t                el = this;\n\t            if (names[name] == \"colour\") {\n\t                A = Snap.color(a);\n\t                B = Snap.color(b);\n\t                return {\n\t                    from: [A.r, A.g, A.b, A.opacity],\n\t                    to: [B.r, B.g, B.b, B.opacity],\n\t                    f: getColour\n\t                };\n\t            }\n\t            if (name == \"viewBox\") {\n\t                A = this.attr(name).vb.split(\" \").map(Number);\n\t                B = b.split(\" \").map(Number);\n\t                return {\n\t                    from: A,\n\t                    to: B,\n\t                    f: getViewBox\n\t                };\n\t            }\n\t            if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t                if (typeof b == \"string\") {\n\t                    b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n\t                }\n\t                a = this.matrix;\n\t                if (!Snap._.rgTransform.test(b)) {\n\t                    b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n\t                } else {\n\t                    b = Snap._.transform2matrix(b, this.getBBox());\n\t                }\n\t                return equaliseTransform(a, b, function () {\n\t                    return el.getBBox(1);\n\t                });\n\t            }\n\t            if (name == \"d\" || name == \"path\") {\n\t                A = Snap.path.toCubic(a, b);\n\t                return {\n\t                    from: path2array(A[0]),\n\t                    to: path2array(A[1]),\n\t                    f: getPath(A[0])\n\t                };\n\t            }\n\t            if (name == \"points\") {\n\t                A = Str(a).split(Snap._.separator);\n\t                B = Str(b).split(Snap._.separator);\n\t                return {\n\t                    from: A,\n\t                    to: B,\n\t                    f: function f(val) {\n\t                        return val;\n\t                    }\n\t                };\n\t            }\n\t            if (isNumeric(a) && isNumeric(b)) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: parseFloat(b),\n\t                    f: getNumber\n\t                };\n\t            }\n\t            var aUnit = a.match(reUnit),\n\t                bUnit = Str(b).match(reUnit);\n\t            if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: parseFloat(b),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                return {\n\t                    from: this.asPX(name),\n\t                    to: this.asPX(name, b),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        });\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    // \n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    // \n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    // \n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            has = \"hasOwnProperty\",\n\t            supportsTouch = \"createTouch\" in glob.doc,\n\t            events = [\"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"],\n\t            touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t            getScroll = function getScroll(xy, el) {\n\t            var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t                doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t            return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t        },\n\t            preventDefault = function preventDefault() {\n\t            this.returnValue = false;\n\t        },\n\t            preventTouch = function preventTouch() {\n\t            return this.originalEvent.preventDefault();\n\t        },\n\t            stopPropagation = function stopPropagation() {\n\t            this.cancelBubble = true;\n\t        },\n\t            stopTouch = function stopTouch() {\n\t            return this.originalEvent.stopPropagation();\n\t        },\n\t            addEvent = function addEvent(obj, type, fn, element) {\n\t            var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t                f = function f(e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t            if (type !== realName) {\n\t                obj.addEventListener(type, f, false);\n\t            }\n\t\n\t            obj.addEventListener(realName, f, false);\n\t\n\t            return function () {\n\t                if (type !== realName) {\n\t                    obj.removeEventListener(type, f, false);\n\t                }\n\t\n\t                obj.removeEventListener(realName, f, false);\n\t                return true;\n\t            };\n\t        },\n\t            drag = [],\n\t            dragMove = function dragMove(e) {\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = getScroll(\"y\"),\n\t                scrollX = getScroll(\"x\"),\n\t                dragi,\n\t                j = drag.length;\n\t            while (j--) {\n\t                dragi = drag[j];\n\t                if (supportsTouch) {\n\t                    var i = e.touches && e.touches.length,\n\t                        touch;\n\t                    while (i--) {\n\t                        touch = e.touches[i];\n\t                        if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                            x = touch.clientX;\n\t                            y = touch.clientY;\n\t                            (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                            break;\n\t                        }\n\t                    }\n\t                } else {\n\t                    e.preventDefault();\n\t                }\n\t                var node = dragi.el.node,\n\t                    o,\n\t                    next = node.nextSibling,\n\t                    parent = node.parentNode,\n\t                    display = node.style.display;\n\t                // glob.win.opera && parent.removeChild(node);\n\t                // node.style.display = \"none\";\n\t                // o = dragi.el.paper.getElementByPoint(x, y);\n\t                // node.style.display = display;\n\t                // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t                // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t                x += scrollX;\n\t                y += scrollY;\n\t                eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t            }\n\t        },\n\t            dragUp = function dragUp(e) {\n\t            Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t            var i = drag.length,\n\t                dragi;\n\t            while (i--) {\n\t                dragi = drag[i];\n\t                dragi.el._drag = {};\n\t                eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t                eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t            }\n\t            drag = [];\n\t        };\n\t        /*\\\n\t         * Element.click\n\t         [ method ]\n\t         **\n\t         * Adds a click event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unclick\n\t         [ method ]\n\t         **\n\t         * Removes a click event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.dblclick\n\t         [ method ]\n\t         **\n\t         * Adds a double click event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.undblclick\n\t         [ method ]\n\t         **\n\t         * Removes a double click event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mousedown\n\t         [ method ]\n\t         **\n\t         * Adds a mousedown event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmousedown\n\t         [ method ]\n\t         **\n\t         * Removes a mousedown event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mousemove\n\t         [ method ]\n\t         **\n\t         * Adds a mousemove event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmousemove\n\t         [ method ]\n\t         **\n\t         * Removes a mousemove event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseout\n\t         [ method ]\n\t         **\n\t         * Adds a mouseout event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseout\n\t         [ method ]\n\t         **\n\t         * Removes a mouseout event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseover\n\t         [ method ]\n\t         **\n\t         * Adds a mouseover event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseover\n\t         [ method ]\n\t         **\n\t         * Removes a mouseover event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseup\n\t         [ method ]\n\t         **\n\t         * Adds a mouseup event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseup\n\t         [ method ]\n\t         **\n\t         * Removes a mouseup event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchstart\n\t         [ method ]\n\t         **\n\t         * Adds a touchstart event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchstart\n\t         [ method ]\n\t         **\n\t         * Removes a touchstart event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchmove\n\t         [ method ]\n\t         **\n\t         * Adds a touchmove event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchmove\n\t         [ method ]\n\t         **\n\t         * Removes a touchmove event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchend\n\t         [ method ]\n\t         **\n\t         * Adds a touchend event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchend\n\t         [ method ]\n\t         **\n\t         * Removes a touchend event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchcancel\n\t         [ method ]\n\t         **\n\t         * Adds a touchcancel event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchcancel\n\t         [ method ]\n\t         **\n\t         * Removes a touchcancel event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        for (var i = events.length; i--;) {\n\t            (function (eventName) {\n\t                Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                    if (Snap.is(fn, \"function\")) {\n\t                        this.events = this.events || [];\n\t                        this.events.push({\n\t                            name: eventName,\n\t                            f: fn,\n\t                            unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                        });\n\t                    } else {\n\t                        for (var i = 0, ii = this.events.length; i < ii; i++) {\n\t                            if (this.events[i].name == eventName) {\n\t                                try {\n\t                                    this.events[i].f.call(this);\n\t                                } catch (e) {}\n\t                            }\n\t                        }\n\t                    }\n\t                    return this;\n\t                };\n\t                Snap[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                    var events = this.events || [],\n\t                        l = events.length;\n\t                    while (l--) {\n\t                        if (events[l].name == eventName && (events[l].f == fn || !fn)) {\n\t                            events[l].unbind();\n\t                            events.splice(l, 1);\n\t                            !events.length && delete this.events;\n\t                            return this;\n\t                        }\n\t                    }return this;\n\t                };\n\t            })(events[i]);\n\t        }\n\t        /*\\\n\t         * Element.hover\n\t         [ method ]\n\t         **\n\t         * Adds hover event handlers to the element\n\t         - f_in (function) handler for hover in\n\t         - f_out (function) handler for hover out\n\t         - icontext (object) #optional context for hover in handler\n\t         - ocontext (object) #optional context for hover out handler\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t            return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t        };\n\t        /*\\\n\t         * Element.unhover\n\t         [ method ]\n\t         **\n\t         * Removes hover event handlers from the element\n\t         - f_in (function) handler for hover in\n\t         - f_out (function) handler for hover out\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.unhover = function (f_in, f_out) {\n\t            return this.unmouseover(f_in).unmouseout(f_out);\n\t        };\n\t        var draggable = [];\n\t        // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t        // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t        // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t        // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t        /*\\\n\t         * Element.drag\n\t         [ method ]\n\t         **\n\t         * Adds event handlers for an element's drag gesture\n\t         **\n\t         - onmove (function) handler for moving\n\t         - onstart (function) handler for drag start\n\t         - onend (function) handler for drag end\n\t         - mcontext (object) #optional context for moving handler\n\t         - scontext (object) #optional context for drag start handler\n\t         - econtext (object) #optional context for drag end handler\n\t         * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n\t         * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n\t         * `drag.over.<id>` fires as well.\n\t         *\n\t         * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t         o x (number) x position of the mouse\n\t         o y (number) y position of the mouse\n\t         o event (object) DOM event object\n\t         * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t         o dx (number) shift by x from the start point\n\t         o dy (number) shift by y from the start point\n\t         o x (number) x position of the mouse\n\t         o y (number) y position of the mouse\n\t         o event (object) DOM event object\n\t         * End event and end handler are called in specified context or in context of the element with following parameters:\n\t         o event (object) DOM event object\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t            var el = this;\n\t            if (!arguments.length) {\n\t                var origTransform;\n\t                return el.drag(function (dx, dy) {\n\t                    this.attr({\n\t                        transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                    });\n\t                }, function () {\n\t                    origTransform = this.transform().local;\n\t                });\n\t            }\n\t            function start(e, x, y) {\n\t                (e.originalEvent || e).preventDefault();\n\t                el._drag.x = x;\n\t                el._drag.y = y;\n\t                el._drag.id = e.identifier;\n\t                !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t                drag.push({ el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope });\n\t                onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t                onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t                onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t                eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t            }\n\t            function init(e, x, y) {\n\t                eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t            }\n\t            eve.on(\"snap.draginit.\" + el.id, start);\n\t            el._drag = {};\n\t            draggable.push({ el: el, start: start, init: init });\n\t            el.mousedown(init);\n\t            return el;\n\t        };\n\t        /*\n\t         * Element.onDragOver\n\t         [ method ]\n\t         **\n\t         * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t         - f (function) handler for event, first argument would be the element you are dragging over\n\t        \\*/\n\t        // elproto.onDragOver = function (f) {\n\t        //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t        // };\n\t        /*\\\n\t         * Element.undrag\n\t         [ method ]\n\t         **\n\t         * Removes all drag event handlers from the given element\n\t        \\*/\n\t        elproto.undrag = function () {\n\t            var i = draggable.length;\n\t            while (i--) {\n\t                if (draggable[i].el == this) {\n\t                    this.unmousedown(draggable[i].init);\n\t                    draggable.splice(i, 1);\n\t                    eve.unbind(\"snap.drag.*.\" + this.id);\n\t                    eve.unbind(\"snap.draginit.\" + this.id);\n\t                }\n\t            }!draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t            return this;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            pproto = Paper.prototype,\n\t            rgurl = /^\\s*url\\((.+)\\)/,\n\t            Str = String,\n\t            $ = Snap._.$;\n\t        Snap.filter = {};\n\t        /*\\\n\t         * Paper.filter\n\t         [ method ]\n\t         **\n\t         * Creates a `<filter>` element\n\t         **\n\t         - filstr (string) SVG fragment of filter provided as a string\n\t         = (object) @Element\n\t         * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t         > Usage\n\t         | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        pproto.filter = function (filstr) {\n\t            var paper = this;\n\t            if (paper.type != \"svg\") {\n\t                paper = paper.paper;\n\t            }\n\t            var f = Snap.parse(Str(filstr)),\n\t                id = Snap._.id(),\n\t                width = paper.node.offsetWidth,\n\t                height = paper.node.offsetHeight,\n\t                filter = $(\"filter\");\n\t            $(filter, {\n\t                id: id,\n\t                filterUnits: \"userSpaceOnUse\"\n\t            });\n\t            filter.appendChild(f.node);\n\t            paper.defs.appendChild(filter);\n\t            return new Element(filter);\n\t        };\n\t\n\t        eve.on(\"snap.util.getattr.filter\", function () {\n\t            eve.stop();\n\t            var p = $(this.node, \"filter\");\n\t            if (p) {\n\t                var match = Str(p).match(rgurl);\n\t                return match && Snap.select(match[1]);\n\t            }\n\t        });\n\t        eve.on(\"snap.util.attr.filter\", function (value) {\n\t            if (value instanceof Element && value.type == \"filter\") {\n\t                eve.stop();\n\t                var id = value.node.id;\n\t                if (!id) {\n\t                    $(value.node, { id: value.id });\n\t                    id = value.id;\n\t                }\n\t                $(this.node, {\n\t                    filter: Snap.url(id)\n\t                });\n\t            }\n\t            if (!value || value == \"none\") {\n\t                eve.stop();\n\t                this.node.removeAttribute(\"filter\");\n\t            }\n\t        });\n\t        /*\\\n\t         * Snap.filter.blur\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the blur filter\n\t         **\n\t         - x (number) amount of horizontal blur, in pixels\n\t         - y (number) #optional amount of vertical blur, in pixels\n\t         = (string) filter representation\n\t         > Usage\n\t         | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        Snap.filter.blur = function (x, y) {\n\t            if (x == null) {\n\t                x = 2;\n\t            }\n\t            var def = y == null ? x : [x, y];\n\t            return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t                def: def\n\t            });\n\t        };\n\t        Snap.filter.blur.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.shadow\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the shadow filter\n\t         **\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - blur (number) #optional amount of blur\n\t         - color (string) #optional color of the shadow\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         * or\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - color (string) #optional color of the shadow\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         * which makes blur default to `4`. Or\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         = (string) filter representation\n\t         > Usage\n\t         | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t            if (opacity == null) {\n\t                if (color == null) {\n\t                    opacity = blur;\n\t                    blur = 4;\n\t                    color = \"#000\";\n\t                } else {\n\t                    opacity = color;\n\t                    color = blur;\n\t                    blur = 4;\n\t                }\n\t            }\n\t            if (blur == null) {\n\t                blur = 4;\n\t            }\n\t            if (opacity == null) {\n\t                opacity = 1;\n\t            }\n\t            if (dx == null) {\n\t                dx = 0;\n\t                dy = 2;\n\t            }\n\t            if (dy == null) {\n\t                dy = dx;\n\t            }\n\t            color = Snap.color(color);\n\t            return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t                color: color,\n\t                dx: dx,\n\t                dy: dy,\n\t                blur: blur,\n\t                opacity: opacity\n\t            });\n\t        };\n\t        Snap.filter.shadow.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.grayscale\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the grayscale filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.grayscale = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t                a: 0.2126 + 0.7874 * (1 - amount),\n\t                b: 0.7152 - 0.7152 * (1 - amount),\n\t                c: 0.0722 - 0.0722 * (1 - amount),\n\t                d: 0.2126 - 0.2126 * (1 - amount),\n\t                e: 0.7152 + 0.2848 * (1 - amount),\n\t                f: 0.0722 - 0.0722 * (1 - amount),\n\t                g: 0.2126 - 0.2126 * (1 - amount),\n\t                h: 0.0722 + 0.9278 * (1 - amount)\n\t            });\n\t        };\n\t        Snap.filter.grayscale.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.sepia\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the sepia filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.sepia = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t                a: 0.393 + 0.607 * (1 - amount),\n\t                b: 0.769 - 0.769 * (1 - amount),\n\t                c: 0.189 - 0.189 * (1 - amount),\n\t                d: 0.349 - 0.349 * (1 - amount),\n\t                e: 0.686 + 0.314 * (1 - amount),\n\t                f: 0.168 - 0.168 * (1 - amount),\n\t                g: 0.272 - 0.272 * (1 - amount),\n\t                h: 0.534 - 0.534 * (1 - amount),\n\t                i: 0.131 + 0.869 * (1 - amount)\n\t            });\n\t        };\n\t        Snap.filter.sepia.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.saturate\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the saturate filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.saturate = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t                amount: 1 - amount\n\t            });\n\t        };\n\t        Snap.filter.saturate.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.hueRotate\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the hue-rotate filter\n\t         **\n\t         - angle (number) angle of rotation\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.hueRotate = function (angle) {\n\t            angle = angle || 0;\n\t            return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t                angle: angle\n\t            });\n\t        };\n\t        Snap.filter.hueRotate.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.invert\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the invert filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.invert = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            //        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t                amount: amount,\n\t                amount2: 1 - amount\n\t            });\n\t        };\n\t        Snap.filter.invert.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.brightness\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the brightness filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.brightness = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t                amount: amount\n\t            });\n\t        };\n\t        Snap.filter.brightness.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.contrast\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the contrast filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.contrast = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t                amount: amount,\n\t                amount2: .5 - amount / 2\n\t            });\n\t        };\n\t        Snap.filter.contrast.toString = function () {\n\t            return this();\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var box = Snap._.box,\n\t            is = Snap.is,\n\t            firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t            toString = function toString() {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t        /*\\\n\t         * Element.getAlign\n\t         [ method ]\n\t         **\n\t         * Returns shift needed to align the element relatively to given element.\n\t         * If no elements specified, parent `<svg>` container will be used.\n\t         - el (object) @optional alignment element\n\t         - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t         = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t         > Usage\n\t         | el.transform(el.getAlign(el2, \"top\"));\n\t         * or\n\t         | var dy = el.getAlign(el2, \"top\").dy;\n\t        \\*/\n\t        Element.prototype.getAlign = function (el, way) {\n\t            if (way == null && is(el, \"string\")) {\n\t                way = el;\n\t                el = null;\n\t            }\n\t            el = el || this.paper;\n\t            var bx = el.getBBox ? el.getBBox() : box(el),\n\t                bb = this.getBBox(),\n\t                out = {};\n\t            way = way && way.match(firstLetter);\n\t            way = way ? way[1].toLowerCase() : \"c\";\n\t            switch (way) {\n\t                case \"t\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.y - bb.y;\n\t                    break;\n\t                case \"b\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.y2 - bb.y2;\n\t                    break;\n\t                case \"m\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.cy - bb.cy;\n\t                    break;\n\t                case \"l\":\n\t                    out.dx = bx.x - bb.x;\n\t                    out.dy = 0;\n\t                    break;\n\t                case \"r\":\n\t                    out.dx = bx.x2 - bb.x2;\n\t                    out.dy = 0;\n\t                    break;\n\t                default:\n\t                    out.dx = bx.cx - bb.cx;\n\t                    out.dy = 0;\n\t                    break;\n\t            }\n\t            out.toString = toString;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Element.align\n\t         [ method ]\n\t         **\n\t         * Aligns the element relatively to given one via transformation.\n\t         * If no elements specified, parent `<svg>` container will be used.\n\t         - el (object) @optional alignment element\n\t         - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t         = (object) this element\n\t         > Usage\n\t         | el.align(el2, \"top\");\n\t         * or\n\t         | el.align(\"middle\");\n\t        \\*/\n\t        Element.prototype.align = function (el, way) {\n\t            return this.transform(\"...\" + this.getAlign(el, way));\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        // Colours are from https://www.materialui.co\n\t        var red = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n\t            pink = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n\t            purple = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n\t            deeppurple = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n\t            indigo = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n\t            blue = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n\t            lightblue = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n\t            cyan = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n\t            teal = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n\t            green = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n\t            lightgreen = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n\t            lime = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n\t            yellow = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n\t            amber = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n\t            orange = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n\t            deeporange = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n\t            brown = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n\t            grey = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n\t            bluegrey = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n\t        /*\\\n\t         * Snap.mui\n\t         [ property ]\n\t         **\n\t         * Contain Material UI colours.\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.mui = {};\n\t        /*\\\n\t         * Snap.flat\n\t         [ property ]\n\t         **\n\t         * Contain Flat UI colours.\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.flat = {};\n\t        function saveColor(colors) {\n\t            colors = colors.split(/(?=#)/);\n\t            var color = new String(colors[5]);\n\t            color[50] = colors[0];\n\t            color[100] = colors[1];\n\t            color[200] = colors[2];\n\t            color[300] = colors[3];\n\t            color[400] = colors[4];\n\t            color[500] = colors[5];\n\t            color[600] = colors[6];\n\t            color[700] = colors[7];\n\t            color[800] = colors[8];\n\t            color[900] = colors[9];\n\t            if (colors[10]) {\n\t                color.A100 = colors[10];\n\t                color.A200 = colors[11];\n\t                color.A400 = colors[12];\n\t                color.A700 = colors[13];\n\t            }\n\t            return color;\n\t        }\n\t        Snap.mui.red = saveColor(red);\n\t        Snap.mui.pink = saveColor(pink);\n\t        Snap.mui.purple = saveColor(purple);\n\t        Snap.mui.deeppurple = saveColor(deeppurple);\n\t        Snap.mui.indigo = saveColor(indigo);\n\t        Snap.mui.blue = saveColor(blue);\n\t        Snap.mui.lightblue = saveColor(lightblue);\n\t        Snap.mui.cyan = saveColor(cyan);\n\t        Snap.mui.teal = saveColor(teal);\n\t        Snap.mui.green = saveColor(green);\n\t        Snap.mui.lightgreen = saveColor(lightgreen);\n\t        Snap.mui.lime = saveColor(lime);\n\t        Snap.mui.yellow = saveColor(yellow);\n\t        Snap.mui.amber = saveColor(amber);\n\t        Snap.mui.orange = saveColor(orange);\n\t        Snap.mui.deeporange = saveColor(deeporange);\n\t        Snap.mui.brown = saveColor(brown);\n\t        Snap.mui.grey = saveColor(grey);\n\t        Snap.mui.bluegrey = saveColor(bluegrey);\n\t        Snap.flat.turquoise = \"#1abc9c\";\n\t        Snap.flat.greensea = \"#16a085\";\n\t        Snap.flat.sunflower = \"#f1c40f\";\n\t        Snap.flat.orange = \"#f39c12\";\n\t        Snap.flat.emerland = \"#2ecc71\";\n\t        Snap.flat.nephritis = \"#27ae60\";\n\t        Snap.flat.carrot = \"#e67e22\";\n\t        Snap.flat.pumpkin = \"#d35400\";\n\t        Snap.flat.peterriver = \"#3498db\";\n\t        Snap.flat.belizehole = \"#2980b9\";\n\t        Snap.flat.alizarin = \"#e74c3c\";\n\t        Snap.flat.pomegranate = \"#c0392b\";\n\t        Snap.flat.amethyst = \"#9b59b6\";\n\t        Snap.flat.wisteria = \"#8e44ad\";\n\t        Snap.flat.clouds = \"#ecf0f1\";\n\t        Snap.flat.silver = \"#bdc3c7\";\n\t        Snap.flat.wetasphalt = \"#34495e\";\n\t        Snap.flat.midnightblue = \"#2c3e50\";\n\t        Snap.flat.concrete = \"#95a5a6\";\n\t        Snap.flat.asbestos = \"#7f8c8d\";\n\t        /*\\\n\t         * Snap.importMUIColors\n\t         [ method ]\n\t         **\n\t         * Imports Material UI colours into global object.\n\t         | Snap.importMUIColors();\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.importMUIColors = function () {\n\t            for (var color in Snap.mui) {\n\t                if (Snap.mui.hasOwnProperty(color)) {\n\t                    window[color] = Snap.mui[color];\n\t                }\n\t            }\n\t        };\n\t    });\n\t\n\t    return Snap;\n\t});\n\t}.call(window));\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// intro.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3c71f7de570ffbdd0cc9","const\r\n    Snap = require(`imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js`);\r\n\r\nconst margin = 54,\r\n    arr = [0, 1, 2, 3],\r\n    w = $(window).width(),\r\n    h = $(window).height(),\r\n    iw = w / 4,\r\n    ih = h / 4;\r\n\r\nfunction shuffle(a) {\r\n    for (let i = a.length; i; i--) {\r\n        let j = Math.floor(Math.random() * i);\r\n        [a[i - 1], a[j]] = [a[j], a[i - 1]];\r\n    }\r\n}\r\n\r\nfunction intro_start() {\r\n\r\n\r\n    let s = Snap('#intrologo');\r\n\r\n    s\r\n        .attr({viewBox: [0, 0, w, h].join(',')})\r\n        .attr('height', h)\r\n        .attr('width', w);\r\n\r\n\r\n    let groups = s.selectAll('.gr');\r\n\r\n    function sh() {\r\n        shuffle(arr);\r\n\r\n        groups.forEach(function (elem, i) {\r\n            let a = arr[i],\r\n                matrix = new Snap.Matrix(),\r\n                hh = margin + ih * a,\r\n                ww = margin + iw * i + (a * 30);\r\n            matrix.scale(.8);\r\n\r\n            if (hh > h * 0.9 && i == 0) {\r\n                hh = hh - 300;\r\n            }\r\n\r\n            matrix.translate(ww, hh);\r\n\r\n\r\n            elem.attr({transform: matrix})\r\n\r\n\r\n        });\r\n    }\r\n\r\n    sh();\r\n\r\n    s.attr('class', 'show');\r\n    var curindex = 0;\r\n    $('.intro__section').on('click', function (e) {\r\n\r\n        if ($(e.target).is('.pointer *')) {\r\n            $('html, body').animate({scrollTop: $(window).height()});\r\n            return;\r\n        }\r\n\r\n        curindex = curindex + 1;\r\n\r\n        var\r\n            photos = intro_content.photos,\r\n            lead = intro_content.lead,\r\n            photo = $('.intro__img'),\r\n            text = $('.intro__section h1 span');\r\n\r\n\r\n        if (typeof photos[curindex] === 'undefined') {\r\n            curindex = 0;\r\n        }\r\n\r\n        var img = new Image();\r\n        img.src = photos[curindex]['full'];\r\n\r\n        img.onload = function () {\r\n            photo.attr('src', img.src)\r\n        };\r\n\r\n\r\n        text.text(lead[curindex]['content'])\r\n\r\n        sh();\r\n    });\r\n\r\n\r\n}\r\n$(document).ready(function () {\r\n    intro_start();\r\n\r\n});\n\n\n// WEBPACK FOOTER //\n// ./assets/js/intro.js","// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n\n\n// WEBPACK FOOTER //\n// ./~/snapsvg/dist/snap.svg.js"],"sourceRoot":""}